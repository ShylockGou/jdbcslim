<!DOCTYPE html>
<html><head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">

  <title>JdbcSim Documentation</title>
 
  <link rel="shortcut icon" type="image/png" href="http://fitnesse.org/files/fitnesse/images/favicon.png">
  <link rel="stylesheet" type="text/css" href="http://fitnesse.org/files/fitnesse/css/fitnesse_wiki.css" />
  <link rel="stylesheet" type="text/css" href="http://fitnesse.org/files/fitnesse/css/fitnesse_pages.css" />
  <link rel="stylesheet" type="text/css" href="http://fitnesse.org/files/fitnesse/wysiwyg/wysiwyg.css" media="screen"/>
  <link rel="stylesheet" type="text/css" href="http://fitnesse.org/files/fitnesse/bootstrap/css/fitnesse-bootstrap.css">
  <link rel="stylesheet" type="text/css" href="http://fitnesse.org/files/fitnesse/question.mark/question.mark.css" />

  <script src="http://fitnesse.org/files/fitnesse/javascript/jquery-1.11.3.min.js" type="text/javascript"></script>
  <script src="http://fitnesse.org/files/fitnesse/javascript/fitnesse.js" type="text/javascript"></script>

  <script src="http://fitnesse.org/files/fitnesse/bootstrap/js/bootstrap.js" type="text/javascript"></script>
  <script src="http://fitnesse.org/files/fitnesse/bootstrap/js/respond.js" type="text/javascript"></script>
 </head>
 <body class="testPage">
  <article>
<div class="alternating_block"><br><h1 id="test-summaries">Jdbc Slim</h1>
<br><a href="#JdbcSlim">JdbcSlim</a> is the framework to easily integrate database queries and commands into Slim <span class="fitnesse">FitNesse</span> testing.<br>The design focuses to keep configuration data, test data and SQL code separate. <br>This ensures that requirements are written independent of the implementation and understandable by business users.<br><br>The framework can be used by Developers, Testers and Business Users with SQL knowledge. <br><br><a href="#JdbcSlim">JdbcSlim</a> is agnostic of database system specifics and has no code special to any database system. <br>Such things should be handled by the jdbc driver. <br>Nevertheless
 the jdbc code is segregated from the slim code and adding any driver 
specific requirements can be done by simply changing a single class.<br><br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
		<li>
			<a href="#JdbcSlim.Installation" class="static">Installation</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide" class="test">User Guide +</a>
			<ul class="toc2">
				<li>
					<a href="#JdbcSlim.UserGuide.1ASimpleExample" class="test">1 A Simple Example +</a>
 ...				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.2KeyBenefits.1WaitingForAsynchronousResults" class="suite">2 Key Benefits *</a>
					<span class="pageHelp">: More examples which showscase the benefit of jdbcSlim</span>
 ...				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection" class="test">3 Howto Configure The Database Connection +</a>
 ...				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands" class="test">4 The Mapping Between Test Data And Commands +</a>
 ...				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.5ParametersOfTheSQLCommand" class="test">5 Parameters Of The S Q L Command +</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.6OutputOptions" class="test">6 Output Options +</a>
 ...				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.7UsingSqlInScriptsAndScenarios" class="test">7 Using Sql In Scripts And Scenarios +</a>
 ...				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.9NullTrailingSpacesAndEmptyStrings" class="test">9 Null Trailing Spaces And Empty Strings +</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.JdbcAuthenticator" class="test">Jdbc Authenticator +</a>
				</li>
			</ul>
		</li>
		<li>
			<a href="#JdbcSlim.XIReferenceSheet" class="test">X I Reference Sheet +</a>
			<span class="pageHelp">: Summary of all flags and commands</span>
		</li>
	</ul>
</div>
<br><br><div class="collapsible open" id="JdbcSlim.Installation"><ul><li><a href="#" class="expandall">Expand</a></li><li><a href="#" class="collapseall">Collapse</a></li></ul>
	<p class="title">Included page: <a href="#JdbcSlim.Installation">&gt;Installation</a> <a href="#JdbcSlim.Installation?edit&amp;redirectToReferer=true&amp;redirectAction=" class="edit"></a></p>
	<div><h2>Download the latest Jdbc Slim library from github.com\six42\jdbcslim</h2>
<span class="meta">variable defined: JdbcSlimLib=jdbcslim.jar</span>
<br><br><h2>Installation Path</h2>
Adujust the below path if you installed at a different location<br>This path is relative to the folder in which <span class="fitnesse">FitNesse</span> got started <br><span class="meta">variable defined: LibInstallPath=plugins\jdbcslim\</span>
<br><br>The Jdbc Slim Library - always required<br><span class="meta">classpath: plugins\jdbcslim\jdbcslim.jar</span><br><br><h2>Further dependencies</h2>
This is required to support encryption. It can be downloaded from <a href="https://github.com/dbfit/dbfit/releases/tag/v3.2.0">https://github.com/dbfit/dbfit/releases/tag/v3.2.0</a><br><span class="meta">classpath: plugins\jdbcslim\commons-codec-1.9.jar</span><br><span class="meta">classpath: plugins\jdbcslim\dbfit-core-3.2.0.jar</span><br><br>See the <a href="#JdbcSlim.SuiteSetup">SuiteSetup</a> pages for driver specific setup. <br>JDBC driver used for the samples. Not required if you use a different JDBC driver<br>plugins\jdbcslim\h2-1.4.188.jar<br>plugins\jdbcslim\csvjdbc-1.0-18.jar<br><br><h2>User Manual  and Test Suite</h2>
To access the user manual and run the examples copy all Jdbc Slim Fitnesse pages from github to FitNesseRoot\PlugIns<br>Copy from github the folder plugins\jdbcslim\TestDB to plugins\jdbcslim\TestDB in your installation<br><span class="meta">variable defined: TestDbPath=${LibInstallPath}TestDB\</span>
<br><br>Execute the suite on <a href="#JdbcSlim">.PlugIns.JdbcSlim</a><br><br><br><h2>To build your own test pages</h2>
1. include this page on the root page of your suite <br>2. include the <a href="#JdbcSlim.SuiteSetup">SuiteSetup</a> page or a page with similar content in the setup of your suite  </div>
</div>
<br><br></div>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide" class="test_name">JdbcSlim.UserGuide</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
		<li>
			<a href="#JdbcSlim.UserGuide.1ASimpleExample" class="test">1 A Simple Example +</a>
			<ul class="toc2">
				<li>
					<a href="#JdbcSlim.UserGuide.1ASimpleExample.SeparatingSqlCommandsAndRequirements" class="test">Separating Sql Commands And Requirements +</a>
 ...				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.1ASimpleExample.WritingGenericRequirementsWithAlias" class="test">Writing Generic Requirements With Alias +</a>
					<span class="pageHelp">: Requirements without any visible SQL</span>
 ...				</li>
			</ul>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.2KeyBenefits.1WaitingForAsynchronousResults" class="suite">2 Key Benefits *</a>
			<span class="pageHelp">: More examples which showscase the benefit of jdbcSlim</span>
			<ul class="toc2">
				<li>
					<a href="#JdbcSlim.UserGuide.2KeyBenefits.1WaitingForAsynchronousResults" class="test">1 Waiting For Asynchronous Results +</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.2KeyBenefits.2TestingOnSideEffects" class="test">2 Testing On Side Effects +</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.2KeyBenefits.3MultiTableStatement" class="test">3 Multi Table Statement +</a>
 ...				</li>
			</ul>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection" class="test">3 Howto Configure The Database Connection +</a>
			<ul class="toc2">
				<li>
					<a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.ConnectionReuseViaNaming" class="test">Connection Reuse Via Naming +</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.CustomisingTheConnectionWithOwnImplementations" class="test">Customising The Connection With Own Implementations +</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.EncryptingPasswords" class="test">Encrypting Passwords +</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables" class="test">Feature Overview Of Property Files And Tables +</a>
 ...				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.UsingProperties" class="test">Using Properties +</a>
				</li>
			</ul>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands" class="test">4 The Mapping Between Test Data And Commands +</a>
			<ul class="toc2">
				<li>
					<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.DefaultInputValues" class="test">Default Input Values +</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.EmptyExpectedCellsAreMarkedAsIgnored" class="test">Empty Expected Cells Are Marked As Ignored +</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.InsertUpdateDelete" class="test">Insert Update Delete +</a>
 ...				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.ReplacerStringCanBeAnyName" class="test">Replacer String Can Be Any Name +</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.ResultComparatorsCanBeUsed" class="test">Result Comparators Can Be Used +</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures" class="test">Stored Procedures +</a>
 ...				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.UnusedInputColumnsAreFlagged" class="test">Unused Input Columns Are Flagged +</a>
				</li>
			</ul>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.5ParametersOfTheSQLCommand" class="test">5 Parameters Of The S Q L Command +</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.6OutputOptions" class="test">6 Output Options +</a>
			<ul class="toc2">
				<li>
					<a href="#JdbcSlim.UserGuide.6OutputOptions.ColumnAlias" class="test">Column Alias +</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.6OutputOptions.Sorting" class="test">Sorting +</a>
 ...				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.6OutputOptions.SubQuery" class="test">Sub Query +</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.6OutputOptions.TotalOnly" class="test">Total Only +</a>
				</li>
			</ul>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.7UsingSqlInScriptsAndScenarios" class="test">7 Using Sql In Scripts And Scenarios +</a>
			<ul class="toc2">
				<li>
					<a href="#JdbcSlim.UserGuide.7UsingSqlInScriptsAndScenarios.SymbolAssignmentOfResults" class="test">Symbol Assignment Of Results +</a>
				</li>
			</ul>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.9NullTrailingSpacesAndEmptyStrings" class="test">9 Null Trailing Spaces And Empty Strings +</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.JdbcAuthenticator" class="test">Jdbc Authenticator +</a>
		</li>
	</ul>
</div>
<br></div>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.1ASimpleExample" class="test_name">JdbcSlim.UserGuide.1ASimpleExample</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>Most Tests require three steps.<br>1. Preparing test data<br>2. Execution some business functions<br>3. Validating the impact on the test data<br><br>Lets
 assume we have a database with some information about people and a we 
need to test a business function that relocates a person into a new 
city.  <br><br><h3>1 Preparing test data</h3>
<br>To avoid side effects we execute the test in a transaction<br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td colspan="3">open Connection</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="2">begin transaction</td>
	</tr>
</tbody></table>
<br>To prepare test data two approaches are possible:<br>1.1 Inserting new data into a database<br>1.2 Finding suitable existing data in the database<br><br><br>In this examples we use the second approach and find the ID of users named Ben and Sarah which should move. <br>We store the Id of the users in a Slim Symbol '$TestID' for future reference.<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
		<td>select ID, NAME from TestData where Name ='%NAME%'</td>
	</tr>
	<tr>
		<td>ID?</td>
		<td colspan="2">NAME</td>
	</tr>
	<tr>
		<td>$TestID1=</td>
		<td colspan="2">Ben</td>
	</tr>
	<tr>
		<td>$TestID2=</td>
		<td colspan="2">Sarah</td>
	</tr>
</tbody></table>
<br>Before we proceed we validate that Ben and Sarah still live in the old Cities: Denver and Paris<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
		<td>select City from TestData where ID ='%ID%'</td>
	</tr>
	<tr>
		<td>ID</td>
		<td colspan="2">CITY?</td>
	</tr>
	<tr>
		<td>$TestID1</td>
		<td colspan="2">Denver</td>
	</tr>
	<tr>
		<td>$TestID2</td>
		<td colspan="2">Paris</td>
	</tr>
</tbody></table>
<br><h3>Execution some business functions</h3>
<br>Here calls to your business code will go.<br>A simple update statement which can do the job is given below.<br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
		<td>update TestData set City='%NewCITY%' where ID ='%ID%'</td>
		<td></td>
	</tr>
	<tr>
		<td>ID</td>
		<td>NewCITY</td>
		<td colspan="2">Count?</td>
	</tr>
	<tr>
		<td>$TestID1</td>
		<td>HongKong</td>
		<td colspan="2">1</td>
	</tr>
	<tr>
		<td>$TestID2</td>
		<td>Tokyo</td>
		<td colspan="2">1</td>
	</tr>
</tbody></table>
<br><br><h3>Validating the impact on the test data</h3>
<br>Finally we check that Ben now lives in Hong Kong and Sarah in Tokyo<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
		<td>select City from TestData where ID ='%ID%'</td>
	</tr>
	<tr>
		<td>ID</td>
		<td colspan="2">CITY?</td>
	</tr>
	<tr>
		<td>$TestID1</td>
		<td colspan="2">HongKong</td>
	</tr>
	<tr>
		<td>$TestID2</td>
		<td colspan="2">Tokyo</td>
	</tr>
</tbody></table>
<br><h3>Rollback the change to not impact future tests</h3>
<br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td colspan="3">open Connection</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="2">rollback</td>
	</tr>
	<tr>
		<td colspan="3">close Connection</td>
	</tr>
</tbody></table>
<br><h4>Check that the rollback worked</h4>
<table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
		<td>select City from TestData where ID ='%ID%'</td>
	</tr>
	<tr>
		<td>ID</td>
		<td colspan="2">CITY?</td>
	</tr>
	<tr>
		<td>$TestID1</td>
		<td colspan="2">Denver</td>
	</tr>
	<tr>
		<td>$TestID2</td>
		<td colspan="2">Paris</td>
	</tr>
</tbody></table>
<br><br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
		<li>
			<a href="#JdbcSlim.UserGuide.1ASimpleExample.SeparatingSqlCommandsAndRequirements" class="test">Separating Sql Commands And Requirements +</a>
			<ul class="toc2">
				<li>
					<a href="#JdbcSlim.UserGuide.1ASimpleExample.SeparatingSqlCommandsAndRequirements.SqlSetup" class="static">Sql Setup</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.1ASimpleExample.SeparatingSqlCommandsAndRequirements.SqlTearDown" class="static">Sql Tear Down</a>
				</li>
			</ul>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.1ASimpleExample.WritingGenericRequirementsWithAlias" class="test">Writing Generic Requirements With Alias +</a>
			<span class="pageHelp">: Requirements without any visible SQL</span>
			<ul class="toc2">
				<li>
					<a href="#JdbcSlim.UserGuide.1ASimpleExample.WritingGenericRequirementsWithAlias.SqlSetup" class="static">Sql Setup</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.1ASimpleExample.WritingGenericRequirementsWithAlias.SqlTearDown" class="static">Sql Tear Down</a>
				</li>
			</ul>
		</li>
	</ul>
</div>
<br></div>

<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.1ASimpleExample.SeparatingSqlCommandsAndRequirements" class="test_name">JdbcSlim.UserGuide.1ASimpleExample.SeparatingSqlCommandsAndRequirements</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>Requirements should not contain SQL code:<br><br><ul>
	<li>Not everybody understands SQL commands. But you want that the requirements can be understood by anybody.</li>
	<li>The SQL code can change if a different implementation is chosen. 
But the requirements should not change in this case. They should be 
independent of the implementation.</li>
</ul>
 <br>This can be achieved easily with Jdbc Slim.<br><br>Lets rewrite the first example with Ben and Sarah but write it in less technical terms.   <br>The SQL Code can be moved into a separate page:<br><br><div class="collapsible closed"><ul><li><a href="#" class="expandall">Expand</a></li><li><a href="#" class="collapseall">Collapse</a></li></ul>
	<p class="title">Included page: <a href="#JdbcSlim.UserGuide.1ASimpleExample.SeparatingSqlCommandsAndRequirements.SqlSetUp">&gt;SqlSetUp</a> <a href="#JdbcSlim.UserGuide.1ASimpleExample.SeparatingSqlCommandsAndRequirements.SqlSetUp?edit&amp;redirectToReferer=true&amp;redirectAction=" class="edit"></a></p>
	<div><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>FindTestUserIDs</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>select ID, NAME from TestData where Name ='%NAME%'</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>CheckInitalCityOfUsers</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>select City from TestData where ID ='%ID%'</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>RelocateUserToNewCity</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>update TestData set City='%NewCITY%' where ID ='%ID%'</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>CheckFinalCityOfUsers</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>select City from TestData where ID ='%ID%'</td>
	</tr>
</tbody></table>
<br>To avoid side effects we execute the test in a transaction<br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td colspan="3">open Connection</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="2">begin transaction</td>
	</tr>
</tbody></table>
</div>
</div>
<br><h3>1 Preparing test data</h3>
<br>Find the ID of users named Ben and Sarah which should move. <br>We store the Id of the users in a Slim Symbol '$TestID' for future reference.<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>FindTestUserIDs</td>
	</tr>
	<tr>
		<td>ID?</td>
		<td>NAME</td>
	</tr>
	<tr>
		<td>$TestID=</td>
		<td>Ben</td>
	</tr>
	<tr>
		<td>$TestID2=</td>
		<td>Sarah</td>
	</tr>
</tbody></table>
<br>Before we proceed we validate that Ben and Sarah still live in the old Cities: Denver and Paris<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>CheckInitalCityOfUsers</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>CITY?</td>
	</tr>
	<tr>
		<td>$TestID</td>
		<td>Denver</td>
	</tr>
	<tr>
		<td>$TestID2</td>
		<td>Paris</td>
	</tr>
</tbody></table>
<br><h3>Execution some business functions</h3>
<br>Here calls to your business code will go.<br>A simple update statement which can do the job is given below.<br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td colspan="2">RelocateUserToNewCity</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>NewCITY</td>
		<td>Count?</td>
	</tr>
	<tr>
		<td>$TestID</td>
		<td>HongKong</td>
		<td>1</td>
	</tr>
	<tr>
		<td>$TestID2</td>
		<td>Tokyo</td>
		<td>1</td>
	</tr>
</tbody></table>
<br><br><h3>Validating the impact on the test data</h3>
<br>Finally we check that Ben now lives in Hong Kong and Sarah in Tokyo<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>CheckFinalCityOfUsers</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>CITY?</td>
	</tr>
	<tr>
		<td>$TestID</td>
		<td>HongKong</td>
	</tr>
	<tr>
		<td>$TestID2</td>
		<td>Tokyo</td>
	</tr>
</tbody></table>
<br><div class="collapsible closed"><ul><li><a href="#" class="expandall">Expand</a></li><li><a href="#" class="collapseall">Collapse</a></li></ul>
	<p class="title">Included page: <a href="#JdbcSlim.UserGuide.1ASimpleExample.SeparatingSqlCommandsAndRequirements.SqlTearDown">&gt;SqlTearDown</a> <a href="#JdbcSlim.UserGuide.1ASimpleExample.SeparatingSqlCommandsAndRequirements.SqlTearDown?edit&amp;redirectToReferer=true&amp;redirectAction=" class="edit"></a></p>
	<div><h3>Rollback the change to not impact future tests</h3>
<br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
		<td>debug</td>
	</tr>
	<tr>
		<td colspan="4">open Connection</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="3">rollback</td>
	</tr>
	<tr>
		<td colspan="4">close Connection</td>
	</tr>
</tbody></table>
<br><h4>Check that the rollback worked</h4>
<table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
		<td>select City from TestData where ID ='%ID%'</td>
	</tr>
	<tr>
		<td>ID</td>
		<td colspan="2">CITY?</td>
	</tr>
	<tr>
		<td>$TestID</td>
		<td colspan="2">Denver</td>
	</tr>
	<tr>
		<td>$TestID2</td>
		<td colspan="2">Paris</td>
	</tr>
</tbody></table>
</div>
</div>
<div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
		<li>
			<a href="#JdbcSlim.UserGuide.1ASimpleExample.SeparatingSqlCommandsAndRequirements.SqlSetup" class="static">Sql Setup</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.1ASimpleExample.SeparatingSqlCommandsAndRequirements.SqlTearDown" class="static">Sql Tear Down</a>
		</li>
	</ul>
</div>
<br></div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.1ASimpleExample.SeparatingSqlCommandsAndRequirements\"
 
class=\"link\">JdbcSlim.UserGuide.1ASimpleExample.SeparatingSqlCommandsAndRequirements</a>\r\n\t<span
 class=\"\">(0,047 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:11.363636%\">Running&nbsp;tests&nbsp;...&nbsp;(6/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.1ASimpleExample.WritingGenericRequirementsWithAlias" class="test_name">JdbcSlim.UserGuide.1ASimpleExample.WritingGenericRequirementsWithAlias</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>Requirements should not contain SQL code:<br><br><ul>
	<li>Not everybody understands SQL commands. But you want that the requirements can be understood by anybody.</li>
	<li>The SQL Code can change if a different implementation is chosen. 
But the requirements should not change in this case. They should be 
independent of the implementation.</li>
</ul>
 <br>This can be achieved easily with JdbcSlim<a title="create page" href="#JdbcSlim.UserGuide.1ASimpleExample.JdbcSlim?edit&amp;nonExistent=true">[?]</a>.<br><br>Lets rewrite the first example with Ben and Sarah but write it in less technical terms.   <br>The SQL Code can be moved into a seperate SetUp<a title="create page" href="#JdbcSlim.UserGuide.1ASimpleExample.SetUp?edit&amp;nonExistent=true">[?]</a> page.<br><br><div class="collapsible closed"><ul><li><a href="#" class="expandall">Expand</a></li><li><a href="#" class="collapseall">Collapse</a></li></ul>
	<p class="title">Included page: <a href="#JdbcSlim.UserGuide.1ASimpleExample.WritingGenericRequirementsWithAlias.SqlSetUp">&gt;SqlSetUp</a> <a href="#JdbcSlim.UserGuide.1ASimpleExample.WritingGenericRequirementsWithAlias.SqlSetUp?edit&amp;redirectToReferer=true&amp;redirectAction=" class="edit"></a></p>
	<div><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>FindTestUserIDs</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>select ID, NAME from TestData where Name ='%NAME%'</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>CheckInitalCityOfUsers</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>select City from TestData where ID ='%ID%'</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>RelocateUserToNewCity</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>update TestData set City='%NewCITY%' where ID ='%ID%'</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>CheckFinalCityOfUsers</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>select City from TestData where ID ='%ID%'</td>
	</tr>
</tbody></table>
<br><br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>FindTestUserIDs</td>
	</tr>
	<tr>
		<td>$FTU=</td>
		<td colspan="2">get fixture</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td colspan="2">Define alias</td>
	</tr>
	<tr>
		<td>find test users</td>
		<td>table: $FTU</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>CheckInitalCityOfUsers</td>
	</tr>
	<tr>
		<td>$CICoU=</td>
		<td colspan="2">get fixture</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td colspan="2">Define alias</td>
	</tr>
	<tr>
		<td>check first city of users</td>
		<td>table: $CICoU</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>RelocateUserToNewCity</td>
	</tr>
	<tr>
		<td>$RUTNC=</td>
		<td colspan="2">get fixture</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td colspan="2">Define alias</td>
	</tr>
	<tr>
		<td>relocate users</td>
		<td>table: $RUTNC</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>CheckFinalCityOfUsers</td>
	</tr>
	<tr>
		<td>$CFCoU=</td>
		<td colspan="2">get fixture</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td colspan="2">Define alias</td>
	</tr>
	<tr>
		<td>Check city after relocation</td>
		<td>table: $CFCoU</td>
	</tr>
</tbody></table>
<br><br><br>To avoid side effects we execute the test in a transaction<br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td colspan="3">open Connection</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="2">begin transaction</td>
	</tr>
</tbody></table>
</div>
</div>
<br><br><h3>1 Preparing test data</h3>
<br>Find the ID of users named Ben and Sarah which should move. <br>We store the Id of the users in a Slim Symbol '$TestID' for future reference.<br><br><br><table>
	<tbody><tr>
		<td colspan="2">find test users</td>
	</tr>
	<tr>
		<td>ID?</td>
		<td>NAME</td>
	</tr>
	<tr>
		<td>$TestID=</td>
		<td>Ben</td>
	</tr>
	<tr>
		<td>$TestID2=</td>
		<td>Sarah</td>
	</tr>
</tbody></table>
<br>Before we proceed we validate that Ben and Sarah still live in the old Cities: Denver and Paris<br><br><table>
	<tbody><tr>
		<td colspan="2">check first city of users</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>CITY?</td>
	</tr>
	<tr>
		<td>$TestID</td>
		<td>Denver</td>
	</tr>
	<tr>
		<td>$TestID2</td>
		<td>Paris</td>
	</tr>
</tbody></table>
<br><br><h3>2 Execution some business functions</h3>
<br>Here calls to your business code will go.<br>A simple update statement which can do the job is given below.<br><table>
	<tbody><tr>
		<td colspan="3">relocate users</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>NewCITY</td>
		<td>Count?</td>
	</tr>
	<tr>
		<td>$TestID</td>
		<td>HongKong</td>
		<td>1</td>
	</tr>
	<tr>
		<td>$TestID2</td>
		<td>Tokyo</td>
		<td>1</td>
	</tr>
</tbody></table>
<br><br><h3>3 Validating the impact on the test data</h3>
<br>Finally we check that Ben now lives in Hong Kong and Sarah in Tokyo<br><br><table>
	<tbody><tr>
		<td colspan="2">Check city after relocation</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>CITY?</td>
	</tr>
	<tr>
		<td>$TestID</td>
		<td>HongKong</td>
	</tr>
	<tr>
		<td>$TestID2</td>
		<td>Tokyo</td>
	</tr>
</tbody></table>
<br><div class="collapsible closed"><ul><li><a href="#" class="expandall">Expand</a></li><li><a href="#" class="collapseall">Collapse</a></li></ul>
	<p class="title">Included page: <a href="#JdbcSlim.UserGuide.1ASimpleExample.WritingGenericRequirementsWithAlias.SqlTearDown">&gt;SqlTearDown</a> <a href="#JdbcSlim.UserGuide.1ASimpleExample.WritingGenericRequirementsWithAlias.SqlTearDown?edit&amp;redirectToReferer=true&amp;redirectAction=" class="edit"></a></p>
	<div><h3>Rollback the change to not impact future tests</h3>
<br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
		<td>debug</td>
	</tr>
	<tr>
		<td colspan="4">open Connection</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="3">rollback</td>
	</tr>
	<tr>
		<td colspan="4">close Connection</td>
	</tr>
</tbody></table>
<br><h4>Check that the rollback worked</h4>
<table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
		<td>select City from TestData where ID ='%ID%'</td>
	</tr>
	<tr>
		<td>ID</td>
		<td colspan="2">CITY?</td>
	</tr>
	<tr>
		<td>$TestID</td>
		<td colspan="2">Denver</td>
	</tr>
	<tr>
		<td>$TestID2</td>
		<td colspan="2">Paris</td>
	</tr>
</tbody></table>
</div>
</div>
<br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
		<li>
			<a href="#JdbcSlim.UserGuide.1ASimpleExample.WritingGenericRequirementsWithAlias.SqlSetup" class="static">Sql Setup</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.1ASimpleExample.WritingGenericRequirementsWithAlias.SqlTearDown" class="static">Sql Tear Down</a>
		</li>
	</ul>
</div>
<br></div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.1ASimpleExample.WritingGenericRequirementsWithAlias\"
 
class=\"link\">JdbcSlim.UserGuide.1ASimpleExample.WritingGenericRequirementsWithAlias</a>\r\n\t<span
 class=\"\">(0,047 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:13.636364%\">Running&nbsp;tests&nbsp;...&nbsp;(7/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.2KeyBenefits.1WaitingForAsynchronousResults" class="test_name">JdbcSlim.UserGuide.2KeyBenefits.1WaitingForAsynchronousResults</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br><br><h3>Given</h3>
<table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select ID, City from TestData where ID ='%ID%'</td>
	</tr>
	<tr>
		<td>ID</td>
		<td colspan="2">City?</td>
	</tr>
	<tr>
		<td>1</td>
		<td colspan="2">Berlin</td>
	</tr>
</tbody></table>
<br><br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>Dummy</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>CMD</td>
		<td></td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td colspan="5">Script</td>
	</tr>
	<tr>
		<td colspan="5"># Your code here to create a Connection Object</td>
	</tr>
	<tr>
		<td>start</td>
		<td>SQLCommand</td>
		<td colspan="3">Dummy</td>
	</tr>
	<tr>
		<td>$Cnn=</td>
		<td>testHomeMadeConnection;</td>
		<td>jdbc:h2:mem:h2db;DB_CLOSE_DELAY=-1</td>
		<td>na</td>
		<td>na</td>
	</tr>
	<tr>
		<td colspan="5"># Now add the connection symbol to be able to use it</td>
	</tr>
	<tr>
		<td>addConnection;</td>
		<td>ConnectionName</td>
		<td colspan="3">$Cnn</td>
	</tr>
</tbody></table>
<br><h3>When An asynchronus sql update starts which will execute after 1 seconds</h3>
<br><table>
	<tbody><tr>
		<td colspan="5">Script</td>
	</tr>
	<tr>
		<td>Start</td>
		<td>DelayedExecutor</td>
		<td>$Cnn</td>
		<td>update TestData set City ='Miami' where ID='1'</td>
		<td>1000</td>
	</tr>
</tbody></table>
<br><h3>Then the city value doesn't updates immediately</h3>
<table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select City from TestData where ID ='%ID%'</td>
	</tr>
	<tr>
		<td>ID</td>
		<td colspan="2">City?</td>
	</tr>
	<tr>
		<td>1</td>
		<td colspan="2">Berlin</td>
	</tr>
</tbody></table>
<br><h3>When we add a retry (50 times in 10 seconds)</h3>
<h3>Then we catch the update once it happens</h3>
<table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select City from TestData where ID ='%ID%'</td>
		<td>RETRY=50:10000</td>
	</tr>
	<tr>
		<td>ID</td>
		<td colspan="3">City?</td>
	</tr>
	<tr>
		<td>1</td>
		<td colspan="3">Miami</td>
	</tr>
</tbody></table>
<br><br><br><br><h4>Revert updates done</h4>
<table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>update TestData set City ='%City%' where ID='%ID%'</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>City</td>
		<td>Count?</td>
	</tr>
	<tr>
		<td>1</td>
		<td>Berlin</td>
		<td>1</td>
	</tr>
</tbody></table>
<br><h4>Close the connection and remove it from the list of available connections</h4>
<table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>UseHomeMadeConnection</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>DBConnection</td>
		<td>ConnectionName</td>
	</tr>
	<tr>
		<td>CMD</td>
		<td></td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>Script: SQLCommand</td>
		<td>UseHomeMadeConnection</td>
	</tr>
	<tr>
		<td colspan="2">closeConnection</td>
	</tr>
	<tr>
		<td>removeConnection</td>
		<td>ConnectionName</td>
	</tr>
</tbody></table>
</div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.2KeyBenefits.1WaitingForAsynchronousResults\"
 
class=\"link\">JdbcSlim.UserGuide.2KeyBenefits.1WaitingForAsynchronousResults</a>\r\n\t<span
 class=\"\">(0,016 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:15.909091%\">Running&nbsp;tests&nbsp;...&nbsp;(8/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.2KeyBenefits.2TestingOnSideEffects" class="test_name">JdbcSlim.UserGuide.2KeyBenefits.2TestingOnSideEffects</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>To test that code is working it is not enough to check that the code changed the expected data.<br>It must also be tested that no other data got changed.<br><br>JdbcSlim<a title="create page" href="#JdbcSlim.UserGuide.2KeyBenefits.JdbcSlim?edit&amp;nonExistent=true">[?]</a> supports this in the following way.<br><br>Going back to our initial example where Ben and Sarah moved location.<br>Additional we want to check that no other user got moved.<br><br><h3>Define the query</h3>
<table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>SideEffectCheck</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>TestDatabase</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>select * from TestData where Name not in ('Ben', 'Sarah')</td>
	</tr>
	<tr>
		<td>#</td>
		<td>The 'query' flag below tells SQL Command that this statement will return more than one row</td>
	</tr>
	<tr>
		<td>query</td>
		<td>true</td>
	</tr>
</tbody></table>
<br><h3>Store the data of the other people before the test</h3>
<br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>SideEffectCheck</td>
	</tr>
	<tr>
		<td colspan="3">open connection</td>
	</tr>
	<tr>
		<td colspan="3">execute</td>
	</tr>
	<tr>
		<td>$RSBefore=</td>
		<td colspan="2">resultSheet</td>
	</tr>
	<tr>
		<td colspan="3">close connection</td>
	</tr>
</tbody></table>
<br><br><h3>Run the test</h3>
<br><div class="collapsible closed"><ul><li><a href="#" class="expandall">Expand</a></li><li><a href="#" class="collapseall">Collapse</a></li></ul>
	<p class="title">Included page: <a href="#JdbcSlim.UserGuide.1ASimpleExample">.PlugIns.JdbcSlim.UserGuide.1ASimpleExample</a> <a href="#JdbcSlim.UserGuide.1ASimpleExample?edit&amp;redirectToReferer=true&amp;redirectAction=" class="edit"></a></p>
	<div>Most Tests require three steps.<br>1. Preparing test data<br>2. Execution some business functions<br>3. Validating the impact on the test data<br><br>Lets
 assume we have a database with some information about people and a we 
need to test a business function that relocates a person into a new 
city.  <br><br><h3>1 Preparing test data</h3>
<br>To avoid side effects we execute the test in a transaction<br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td colspan="3">open Connection</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="2">begin transaction</td>
	</tr>
</tbody></table>
<br>To prepare test data two approaches are possible:<br>1.1 Inserting new data into a database<br>1.2 Finding suitable existing data in the database<br><br><br>In this examples we use the second approach and find the ID of users named Ben and Sarah which should move. <br>We store the Id of the users in a Slim Symbol '$TestID' for future reference.<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
		<td>select ID, NAME from TestData where Name ='%NAME%'</td>
	</tr>
	<tr>
		<td>ID?</td>
		<td colspan="2">NAME</td>
	</tr>
	<tr>
		<td>$TestID1=</td>
		<td colspan="2">Ben</td>
	</tr>
	<tr>
		<td>$TestID2=</td>
		<td colspan="2">Sarah</td>
	</tr>
</tbody></table>
<br>Before we proceed we validate that Ben and Sarah still live in the old Cities: Denver and Paris<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
		<td>select City from TestData where ID ='%ID%'</td>
	</tr>
	<tr>
		<td>ID</td>
		<td colspan="2">CITY?</td>
	</tr>
	<tr>
		<td>$TestID1</td>
		<td colspan="2">Denver</td>
	</tr>
	<tr>
		<td>$TestID2</td>
		<td colspan="2">Paris</td>
	</tr>
</tbody></table>
<br><h3>Execution some business functions</h3>
<br>Here calls to your business code will go.<br>A simple update statement which can do the job is given below.<br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
		<td>update TestData set City='%NewCITY%' where ID ='%ID%'</td>
		<td></td>
	</tr>
	<tr>
		<td>ID</td>
		<td>NewCITY</td>
		<td colspan="2">Count?</td>
	</tr>
	<tr>
		<td>$TestID1</td>
		<td>HongKong</td>
		<td colspan="2">1</td>
	</tr>
	<tr>
		<td>$TestID2</td>
		<td>Tokyo</td>
		<td colspan="2">1</td>
	</tr>
</tbody></table>
<br><br><h3>Validating the impact on the test data</h3>
<br>Finally we check that Ben now lives in Hong Kong and Sarah in Tokyo<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
		<td>select City from TestData where ID ='%ID%'</td>
	</tr>
	<tr>
		<td>ID</td>
		<td colspan="2">CITY?</td>
	</tr>
	<tr>
		<td>$TestID1</td>
		<td colspan="2">HongKong</td>
	</tr>
	<tr>
		<td>$TestID2</td>
		<td colspan="2">Tokyo</td>
	</tr>
</tbody></table>
<br><h3>Rollback the change to not impact future tests</h3>
<br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td colspan="3">open Connection</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="2">rollback</td>
	</tr>
	<tr>
		<td colspan="3">close Connection</td>
	</tr>
</tbody></table>
<br><h4>Check that the rollback worked</h4>
<table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
		<td>select City from TestData where ID ='%ID%'</td>
	</tr>
	<tr>
		<td>ID</td>
		<td colspan="2">CITY?</td>
	</tr>
	<tr>
		<td>$TestID1</td>
		<td colspan="2">Denver</td>
	</tr>
	<tr>
		<td>$TestID2</td>
		<td colspan="2">Paris</td>
	</tr>
</tbody></table>
<br><br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
</ul></div>
</div>
</div>
 <br><br><br><h3>Compare the data of the other people after the test.</h3>
<br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>SideEffectCheck</td>
	</tr>
	<tr>
		<td colspan="3">open connection</td>
	</tr>
	<tr>
		<td colspan="3">execute</td>
	</tr>
	<tr>
		<td>$RSAfter=</td>
		<td colspan="2">resultSheet</td>
	</tr>
	<tr>
		<td>$RSDiff=</td>
		<td>compareSheet</td>
		<td>$RSBefore</td>
	</tr>
	<tr>
		<td colspan="3">close connection</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>Table:SheetEcho</td>
		<td>$RSDiff</td>
	</tr>
</tbody></table>
</div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.2KeyBenefits.2TestingOnSideEffects\" 
class=\"link\">JdbcSlim.UserGuide.2KeyBenefits.2TestingOnSideEffects</a>\r\n\t<span
 class=\"\">(0,047 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:18.181818%\">Running&nbsp;tests&nbsp;...&nbsp;(9/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.2KeyBenefits.3MultiTableStatement" class="test_name">JdbcSlim.UserGuide.2KeyBenefits.3MultiTableStatement</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>To prepare business data often more than one table must be updated or data inserted into multiple tables.<br>But for a business user this is often not important. Having said that the requirements should hide this technical detail.<br><br>This can be done with Jdbc Slim.  <br><br><h3>The technical implementation is moved into a Start Up and Tear Down page:</h3>
<br><div class="collapsible closed"><ul><li><a href="#" class="expandall">Expand</a></li><li><a href="#" class="collapseall">Collapse</a></li></ul>
	<p class="title">Included page: <a href="#JdbcSlim.UserGuide.2KeyBenefits.3MultiTableStatement.SqlStartUp">&gt;SqlStartUp</a> <a href="#JdbcSlim.UserGuide.2KeyBenefits.3MultiTableStatement.SqlStartUp?edit&amp;redirectToReferer=true&amp;redirectAction=" class="edit"></a></p>
	<div><h3>The Scenario with two execute statements</h3>
<table>
	<tbody><tr>
		<td>Scenario</td>
		<td>Get The Name</td>
		<td>name</td>
		<td>and phone number</td>
		<td>phone</td>
		<td>for id</td>
		<td>id</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="6">select Name from TestData where ID = '@id'</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="6">success</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="6">rawResult</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="6">resultSheet</td>
	</tr>
	<tr>
		<td>$name=</td>
		<td>getColumnValueByName</td>
		<td>NAME</td>
		<td colspan="4"></td>
	</tr>
	<tr>
		<td colspan="7">#</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="6">select * from TestData where ID = '@id'</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="6">success</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="6">rawResult</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="6">resultSheet</td>
	</tr>
	<tr>
		<td>$phone=</td>
		<td>getColumnValueByName</td>
		<td>Phone</td>
		<td colspan="4"></td>
	</tr>
</tbody></table>
<br><br><br><h3>Define connection details and open a connection</h3>
<br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>ScriptDatabase</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>TestDatabase</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>select * from TestData</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>ScriptDatabase</td>
	</tr>
	<tr>
		<td colspan="3">openConnection</td>
	</tr>
</tbody></table>
<br><br><br><br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
		<li>
			<a href="#JdbcSlim.UserGuide.2KeyBenefits.3MultiTableStatement.SqlStartUp" class="static">Sql Start Up</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.2KeyBenefits.3MultiTableStatement.SqlTearDown" class="static">Sql Tear Down</a>
		</li>
	</ul>
</div>
</div>
</div>
<br><h3>The business defines the requirements in a table</h3>
<br><br><table>
	<tbody><tr>
		<td colspan="3">Get the name and phone number for id</td>
	</tr>
	<tr>
		<td>id</td>
		<td>name?</td>
		<td>phone?</td>
	</tr>
	<tr>
		<td>2</td>
		<td>Ben</td>
		<td>&gt;0</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Till</td>
		<td>&gt;100</td>
	</tr>
	<tr>
		<td>3</td>
		<td>Tom</td>
		<td>&gt;10</td>
	</tr>
	<tr>
		<td>2</td>
		<td>=~/Be/</td>
		<td>&gt;5</td>
	</tr>
</tbody></table>
  <br><br><br><div class="collapsible closed"><ul><li><a href="#" class="expandall">Expand</a></li><li><a href="#" class="collapseall">Collapse</a></li></ul>
	<p class="title">Included page: <a href="#JdbcSlim.UserGuide.2KeyBenefits.3MultiTableStatement.SqlTearDown">&gt;SqlTearDown</a> <a href="#JdbcSlim.UserGuide.2KeyBenefits.3MultiTableStatement.SqlTearDown?edit&amp;redirectToReferer=true&amp;redirectAction=" class="edit"></a></p>
	<div><h3>Close the connection</h3>
<table>
	<tbody><tr>
		<td>Script</td>
	</tr>
	<tr>
		<td>closeConnection</td>
	</tr>
</tbody></table>
<br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
		<li>
			<a href="#JdbcSlim.UserGuide.2KeyBenefits.3MultiTableStatement.SqlStartUp" class="static">Sql Start Up</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.2KeyBenefits.3MultiTableStatement.SqlTearDown" class="static">Sql Tear Down</a>
		</li>
	</ul>
</div>
</div>
</div>
<br>See also: 7UsingSqlInScriptsAndScenarios<br><br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
		<li>
			<a href="#JdbcSlim.UserGuide.2KeyBenefits.3MultiTableStatement.SqlStartUp" class="static">Sql Start Up</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.2KeyBenefits.3MultiTableStatement.SqlTearDown" class="static">Sql Tear Down</a>
		</li>
	</ul>
</div>
<br><br></div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.2KeyBenefits.3MultiTableStatement\" 
class=\"link\">JdbcSlim.UserGuide.2KeyBenefits.3MultiTableStatement</a>\r\n\t<span
 class=\"\">(0,062 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:20.454546%\">Running&nbsp;tests&nbsp;...&nbsp;(10/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection" class="test_name">JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>To configure a JDBC connection 4 parameters are required:<br><br>* JDBC Class<br>* URL to the database<br>* login of a database user<br>* password of the database user<br><br><br>These 4 values can either be stored in a configuration file or on a wiki page inside a <b>Define Properties</b> fixture.<br>For the examples used in this manual the configuration looks as below:<br><br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>DatabaseSetup</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>jdbcDriver</td>
		<td>org.relique.jdbc.csv.CsvDriver</td>
	</tr>
	<tr>
		<td>DBURL</td>
		<td>jdbc:relique:csv:plugins\jdbcslim\TestDB\</td>
	</tr>
	<tr>
		<td>DBUSER</td>
		<td>na</td>
	</tr>
	<tr>
		<td>DBPASSWORD</td>
		<td>na</td>
	</tr>
</tbody></table>
<br><br><b>DatabaseSetup</b> is the name of the configuration and is passed as the first parameter to the SQLCommand.<br><b>key</b> and <b>value</b> are the header line. Below these lines the actual configuration starts.<br><br>The SQL code can also be stored in the configuration. The key is CMD. Below is again an example:<br><br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>FindTestUserIDs</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>DatabaseSetup</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>select ID, NAME from TestData where Name ='%NAME%'</td>
	</tr>
</tbody></table>
<br><br>Further make sure that the java classpath of the slim client contains the jar with the JDBC class.<br><br>Further features of the configuration are described here:<br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
		<li>
			<a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.ConnectionReuseViaNaming" class="test">Connection Reuse Via Naming +</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.CustomisingTheConnectionWithOwnImplementations" class="test">Customising The Connection With Own Implementations +</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.EncryptingPasswords" class="test">Encrypting Passwords +</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables" class="test">Feature Overview Of Property Files And Tables +</a>
			<ul class="toc2">
				<li>
					<a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables.CaseSensitive" class="test">Case Sensitive +</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables.PropertyDefinitionViaAScript" class="test">Property Definition Via A Script +</a>
					<span class="pageHelp">: This needs a redesign - don't use!</span>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables.RemovingDefinitions" class="test">Removing Definitions +</a>
				</li>
			</ul>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.UsingProperties" class="test">Using Properties +</a>
		</li>
	</ul>
</div>
<br></div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection1\" 
class=\"link\">JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection</a>\r\n\t<span
 class=\"\">(0,062 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:22.727272%\">Running&nbsp;tests&nbsp;...&nbsp;(11/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.ConnectionReuseViaNaming"class="test_name">JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.ConnectionReuseViaNaming</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>Instead of creating a new connection for each SQL command table a connection can also be reused.<br><br>Add the property <b>DBConnection</b> to your configuration and give the connection a unique name.<br>The connection stays now open and will be reused for all SQL statements which have the same DBConnection property.<br>IMPORTANT:
 Don't forget to close the connection at the end of your tests and 
remove it from the internal list of available connections.<br><br><h3>Define a connection and assign it a name with the <b>DBConnection</b> key.</h3>
<br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>NamedConnection</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>TestDatabase</td>
	</tr>
	<tr>
		<td>DBConnection</td>
		<td>TestConnection</td>
	</tr>
</tbody></table>
<br><h3>The connection will be opened at the first usage</h3>
<table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>NamedConnection</td>
		<td>select ID, NAME from TestData where Name ='%NAME%'</td>
	</tr>
	<tr>
		<td>ID?</td>
		<td colspan="2">NAME</td>
	</tr>
	<tr>
		<td>2</td>
		<td colspan="2">Ben</td>
	</tr>
	<tr>
		<td>5</td>
		<td colspan="2">Sarah</td>
	</tr>
</tbody></table>
<br><h3>This will reuse the connection. Apart from the DBConnection name no further property is required.</h3>
<table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>ReuseConnection</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>DBConnection</td>
		<td>TestConnection</td>
	</tr>
	<tr>
		<td>CMD</td>
		<td></td>
	</tr>
</tbody></table>
 <br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>ReuseConnection</td>
		<td>select ID, NAME from TestData where Name ='%NAME%'</td>
	</tr>
	<tr>
		<td>ID?</td>
		<td colspan="2">NAME</td>
	</tr>
	<tr>
		<td>2</td>
		<td colspan="2">Ben</td>
	</tr>
	<tr>
		<td>5</td>
		<td colspan="2">Sarah</td>
	</tr>
</tbody></table>
<br><h3>Close the connection and remove it from the list of available connections</h3>
<table>
	<tbody><tr>
		<td>Script: SQLCommand</td>
		<td>ReuseConnection</td>
	</tr>
	<tr>
		<td colspan="2">closeConnection</td>
	</tr>
	<tr>
		<td>removeConnection</td>
		<td>TestConnection</td>
	</tr>
</tbody></table>
<br><h3>Another access to the connection will fail</h3>
<table>
	<tbody><tr>
		<td>comment: SQLCommand</td>
		<td>ReuseConnection</td>
		<td>select ID, NAME from TestData where Name ='%NAME%'</td>
	</tr>
	<tr>
		<td>ID?</td>
		<td colspan="2">NAME</td>
	</tr>
	<tr>
		<td></td>
		<td colspan="2">Ben</td>
	</tr>
	<tr>
		<td></td>
		<td colspan="2">Sarah</td>
	</tr>
</tbody></table>
</div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.ConnectionReuseViaNaming1\"
 
class=\"link\">JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.ConnectionReuseViaNaming</a>\r\n\t<span
 class=\"\">(0,016 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:25.0%\">Running&nbsp;tests&nbsp;...&nbsp;(12/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.CustomisingTheConnectionWithOwnImplementations"class="test_name">JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.CustomisingTheConnectionWithOwnImplementations</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>If your application under test already creates a database connection and you want or must use it also in <span class="fitnesse">FitNesse</span> tests than this can be done.<br>You might also want to use this feature if your connection would require further parameters.<br><br>Just create an object from java.sql.Connection via a <span class="fitnesse">FitNesse</span> Script and assign it to a <span class="fitnesse">FitNesse</span> Symbol.<br>than call addConnection from SQLCommand  in a script and give the connection a name.<br>Use this name in future SQL configurations as DBConnection and your connection object will be used. <br><br>Remember to close the connection once it is not required any more.<br><br><br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>Dummy</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>CMD</td>
		<td></td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td colspan="5">Script</td>
	</tr>
	<tr>
		<td colspan="5"># Your code here to create a Connection Object</td>
	</tr>
	<tr>
		<td>start</td>
		<td>SQLCommand</td>
		<td colspan="3">Dummy</td>
	</tr>
	<tr>
		<td>$Cnn=</td>
		<td>testHomeMadeConnection;</td>
		<td>jdbc:h2:mem:h2db;DB_CLOSE_DELAY=-1</td>
		<td>na</td>
		<td>na</td>
	</tr>
	<tr>
		<td colspan="5"># Now add the connection symbol to be able to use it</td>
	</tr>
	<tr>
		<td>addConnection;</td>
		<td>ConnectionName</td>
		<td colspan="3">$Cnn</td>
	</tr>
</tbody></table>
<br><br><br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>UseHomeMadeConnection</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>DBConnection</td>
		<td>ConnectionName</td>
	</tr>
	<tr>
		<td>CMD</td>
		<td></td>
	</tr>
</tbody></table>
 <br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>UseHomeMadeConnection</td>
		<td>select ID, NAME from TestData where Name ='%NAME%'</td>
	</tr>
	<tr>
		<td>ID?</td>
		<td colspan="2">NAME</td>
	</tr>
	<tr>
		<td>2</td>
		<td colspan="2">Ben</td>
	</tr>
	<tr>
		<td>5</td>
		<td colspan="2">Sarah</td>
	</tr>
</tbody></table>
<br><h3>Close the connection and remove it from the list of available connections</h3>
<table>
	<tbody><tr>
		<td>Script: SQLCommand</td>
		<td>UseHomeMadeConnection</td>
	</tr>
	<tr>
		<td colspan="2">closeConnection</td>
	</tr>
	<tr>
		<td>removeConnection</td>
		<td>ConnectionName</td>
	</tr>
</tbody></table>
</div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.CustomisingTheConnectionWithOwnImplementations1\"
 
class=\"link\">JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.CustomisingTheConnectionWithOwnImplementations</a>\r\n\t<span
 class=\"\">(0,031 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:27.272728%\">Running&nbsp;tests&nbsp;...&nbsp;(13/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.EncryptingPasswords"class="test_name">JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.EncryptingPasswords</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br><br><h3>WARNING: Any smart user of <span class="fitnesse">FitNesse</span> can decryt the encrypted passwords!</h3>
The current implementation avoids that passwords are stored in clear text in files.<br>If you need more security implement a differnt store for your passwords.<br><br><h4>CREDIT: The Encryption implementation is taken from the <a href="http://github.com/dbfit/dbfit">dbfit</a> library.</h4>
  <br>To encrypt a password run:<br><br><p class="note">java -cp 
"commons-codec-1.9.jar;dbfit-core-3.2.0.jar" dbfit.util.crypto.CryptoApp
 **SECRET** -keyStoreLocation plugins\jdbcslim\TestDB\</p><br>Replace **SECRET** with your password<br>If no keyfile exists it will create a new one named .dbfit.jks<br>The keyfile must always be named: .dbfit.jks<br><br><br>Define the location of your key file with ".keyStoreLocation" <br>it is possible to use multiple key files in different locations.<br><br><br><br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>SecretDefinition</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>user</td>
		<td>James</td>
	</tr>
	<tr>
		<td>.keyStoreLocation</td>
		<td>plugins\jdbcslim\TestDB\</td>
	</tr>
	<tr>
		<td>password</td>
		<td>ENC(dP8utYfMtmrWZCylvGsOGw==)</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>Save the world!</td>
	</tr>
</tbody></table>
<br>Check that all the content is now available<br>and the password is not shown in clear text<br><br><table>
	<tbody><tr>
		<td>Table: SheetCommandBase</td>
		<td>SecretDefinition</td>
		<td></td>
		<td>SORT</td>
	</tr>
	<tr>
		<td>Key?&lt;1</td>
		<td colspan="3">Value?</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td colspan="3">Save the world!</td>
	</tr>
	<tr>
		<td>password</td>
		<td colspan="3">****</td>
	</tr>
	<tr>
		<td>sort</td>
		<td colspan="3"></td>
	</tr>
	<tr>
		<td>user</td>
		<td colspan="3">James</td>
	</tr>
</tbody></table>
<br><br><table>
	<tbody><tr>
		<td>Script</td>
		<td>Define Properties</td>
		<td></td>
	</tr>
	<tr>
		<td>show</td>
		<td>show</td>
		<td>SecretDefinition</td>
	</tr>
</tbody></table>
<br><br>Use the "getSecretProperty" function to access encrypted data in your fixture<br><br></div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.EncryptingPasswords1\"
 
class=\"link\">JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.EncryptingPasswords</a>\r\n\t<span
 class=\"\">(0,015 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:29.545454%\">Running&nbsp;tests&nbsp;...&nbsp;(14/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables"class="test_name">JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>Tests should be focused on requirements and in business users language.<br>On the other hand to implement the tests often additional configuration data is required.<br>To keep these separate <b>Define Properties</b> can be used.<br>They are like property files used commonly in Java.<br>They define key value pairs of strings<br><br>Define Properties have the following advantages:<br>* Properties can be defined on Wiki pages<br>* Properties can be defined in files<br>* Multiple property definitions can be merged into one big definition<br>* Properties like passwords can be encrypted<br>* A summary of all definitions can be added to the test results to track how the test was performed<br>* Slim Symbols or Wiki Variables can be used to switch between different sets of properties <br><br><br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
		<li>
			<a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables.CaseSensitive" class="test">Case Sensitive +</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables.PropertyDefinitionViaAScript" class="test">Property Definition Via A Script +</a>
			<span class="pageHelp">: This needs a redesign - don't use!</span>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables.RemovingDefinitions" class="test">Removing Definitions +</a>
		</li>
	</ul>
</div>
<br><br>This page tests the combination of properties definition on this
 Fitnesse test page plus in a properties file. From the file again a 
definition <br>on the wiki page is referenced.<br><br>The definitions are then used/printed in a Sheet Fixture to confirm the correctness.<br><br>The following rules applies<br><ul>
	<li>In files lines or keys starting with "#" are comments and will be ignored</li>
	<li>All keys are trimmed and converted to lower case </li>
	<li>If multiple entries for the same key exist only the value from the last one will remain</li>
	<li>A key ".include" will add the content of "Sheet Definition Fixture"
 whose name matches the value. If such a definition doesn't exist 
content from a file with this name will be included. If no such file can
 be found the test will fail with an exception.  </li>
	<li>A key ".keyStoreLocation" will load a file with a different encryption key</li>
	<li>Values which must span multiple lines can be inserted in files between triple quotes """. See sample file below.</li>
</ul>
<br>To test this page you need a file with the following content:<br><br><div class="collapsible"><ul><li><a href="#" class="expandall">Expand</a></li><li><a href="#" class="collapseall">Collapse</a></li></ul>
	<p class="title">File Content</p>
	<div>Version=v20131230<br><br>jdbcDriver=com.sybase.jdbc4.jdbc.SybDriver<br>DBURL=jdbc:sybase:Tds:localhost/master<br>DBUSER=sa<br>DBPASSWORD=password<br>.include=SubDefinition<br>multiLine="""<br>Line1<br>Line2<br>Line3<br>"""<br>nextKey=Something Else<br></div>
</div>
<br>The file must be named as defined in the following variable:<br><span class="meta">variable defined: DefinitionFileName=${TestDbPath}definition.properties</span>
<br><br><br><br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>TopDefinition</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>myCommand with %NAME%, %CITY%, %AGE%</td>
	</tr>
	<tr>
		<td>DEBUG</td>
		<td></td>
	</tr>
	<tr>
		<td>COMMAND</td>
		<td>YES</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>plugins\jdbcslim\TestDB\definition.properties</td>
	</tr>
	<tr>
		<td>multiLine2</td>
		<td>Hello
World</td>
	</tr>
</tbody></table>
<br>The below "SubDefinition" will be included from the above file <br><br><br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>SubDefinition</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>SORT</td>
		<td>1,2,3,4</td>
	</tr>
	<tr>
		<td>format.date</td>
		<td>YYYY-MM-DD</td>
	</tr>
	<tr>
		<td>version</td>
		<td>OverwrittenFromSubDefintion</td>
	</tr>
</tbody></table>
<br>Check that all the content is now available<br><table>
	<tbody><tr>
		<td>Table: SheetCommandBase</td>
		<td>TopDefinition</td>
		<td></td>
		<td>SORT</td>
	</tr>
	<tr>
		<td>Key?&lt;1</td>
		<td colspan="3">Value?</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td colspan="3">myCommand with %NAME%, %CITY%, %AGE%</td>
	</tr>
	<tr>
		<td>command</td>
		<td colspan="3">YES</td>
	</tr>
	<tr>
		<td>dbpassword</td>
		<td colspan="3">password</td>
	</tr>
	<tr>
		<td>dburl</td>
		<td colspan="3">jdbc:sybase:Tds:localhost/master</td>
	</tr>
	<tr>
		<td>dbuser</td>
		<td colspan="3">sa</td>
	</tr>
	<tr>
		<td>debug</td>
		<td colspan="3"></td>
	</tr>
	<tr>
		<td>format.date</td>
		<td colspan="3">YYYY-MM-DD</td>
	</tr>
	<tr>
		<td>jdbcdriver</td>
		<td colspan="3">com.sybase.jdbc4.jdbc.SybDriver</td>
	</tr>
	<tr>
		<td>multiline</td>
		<td colspan="3">Line1
Line2
Line3</td>
	</tr>
	<tr>
		<td>multiline2</td>
		<td colspan="3">Hello
World</td>
	</tr>
	<tr>
		<td>nextkey</td>
		<td colspan="3">Something Else</td>
	</tr>
	<tr>
		<td>sort</td>
		<td colspan="3"></td>
	</tr>
	<tr>
		<td>version</td>
		<td colspan="3">OverwrittenFromSubDefintion</td>
	</tr>
</tbody></table>
</div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables1\"
 
class=\"link\">JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables</a>\r\n\t<span
 class=\"\">(0,047 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:31.818182%\">Running&nbsp;tests&nbsp;...&nbsp;(15/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables.CaseSensitive"class="test_name">JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables.CaseSensitive</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>The definition names are case sensitive<br>The keys are not case sensitive. only the last defined key will be available in the result map. <br><br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>Def1</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>Hello</td>
		<td>World</td>
	</tr>
	<tr>
		<td>Mad</td>
		<td>Max</td>
	</tr>
	<tr>
		<td>Cmd</td>
		<td>select GetDate()</td>
	</tr>
	<tr>
		<td>HELLO</td>
		<td>Heaven</td>
	</tr>
</tbody></table>
<br><br><table>
	<tbody><tr>
		<td>Script: Define Properties</td>
		<td colspan="3"></td>
	</tr>
	<tr>
		<td>check</td>
		<td>show</td>
		<td>Def1</td>
		<td>{Hello=World, Mad=Max, Cmd=select GetDate(), HELLO=Heaven, }</td>
	</tr>
	<tr>
		<td>check</td>
		<td>show</td>
		<td>def1</td>
		<td>ERROR:No Definitions exists under this name.</td>
	</tr>
</tbody></table>
<br><br><table>
	<tbody><tr>
		<td>Table: SheetCommandBase</td>
		<td>Def1</td>
		<td></td>
		<td>SORT</td>
	</tr>
	<tr>
		<td>Key?&lt;1</td>
		<td colspan="3">Value?</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td colspan="3">select GetDate()</td>
	</tr>
	<tr>
		<td>hello</td>
		<td colspan="3">Heaven</td>
	</tr>
	<tr>
		<td>mad</td>
		<td colspan="3">Max</td>
	</tr>
	<tr>
		<td>sort</td>
		<td colspan="3"></td>
	</tr>
</tbody></table>
<br><br></div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables.CaseSensitive1\"
 
class=\"link\">JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables.CaseSensitive</a>\r\n\t<span
 class=\"\">(0,016 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:34.090908%\">Running&nbsp;tests&nbsp;...&nbsp;(16/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables.PropertyDefinitionViaAScript"class="test_name">JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables.PropertyDefinitionViaAScript</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br><h2>This needs a redesign - don't use!</h2>
<br><table>
	<tbody><tr>
		<td>Script</td>
		<td>Define Properties</td>
		<td>ScriptDefinition</td>
	</tr>
	<tr>
		<td colspan="3">begin table</td>
	</tr>
	<tr>
		<td>setKey</td>
		<td colspan="2">foo</td>
	</tr>
	<tr>
		<td>setValue</td>
		<td colspan="2">bar</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="2">echo</td>
	</tr>
	<tr>
		<td colspan="3">execute</td>
	</tr>
	<tr>
		<td>setKey</td>
		<td colspan="2">foooo</td>
	</tr>
	<tr>
		<td>setValue</td>
		<td colspan="2">baaar</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="2">echo</td>
	</tr>
	<tr>
		<td colspan="3">execute</td>
	</tr>
	<tr>
		<td colspan="3">end table</td>
	</tr>
	<tr>
		<td>$ScriptEcho=</td>
		<td colspan="2">echo</td>
	</tr>
	<tr>
		<td>check</td>
		<td>echo</td>
		<td>$ScriptEcho</td>
	</tr>
	<tr>
		<td>show</td>
		<td>show</td>
		<td>ScriptDefinition</td>
	</tr>
	<tr>
		<td>start</td>
		<td>Define Properties</td>
		<td>ScriptDefinition2</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="2">echo</td>
	</tr>
	<tr>
		<td>check</td>
		<td>echo</td>
		<td>=~/null/</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>TopDefinition3</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>myCommand with %NAME%, %CITY%, %AGE%</td>
	</tr>
	<tr>
		<td>DEBUG</td>
		<td></td>
	</tr>
	<tr>
		<td>COMMAND</td>
		<td>YES</td>
	</tr>
	<tr>
		<td>multiLine2</td>
		<td>Hello
World</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>Script</td>
		<td>Define Properties</td>
		<td colspan="2"></td>
	</tr>
	<tr>
		<td>show</td>
		<td>show</td>
		<td colspan="2">ScriptDefinition</td>
	</tr>
	<tr>
		<td>show</td>
		<td>getDefinition</td>
		<td colspan="2">TopDefinition3</td>
	</tr>
	<tr>
		<td>show</td>
		<td>show</td>
		<td colspan="2">TopDefinition3</td>
	</tr>
	<tr>
		<td>check</td>
		<td>show</td>
		<td>UndefinedDefinition</td>
		<td>ERROR:No Definitions exists under this name.</td>
	</tr>
</tbody></table>
<br><br><br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td colspan="2">SymbolDefinition</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
		<td>echo?</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>myCommand with %NAME%, %CITY%, %AGE%]</td>
		<td>$E=</td>
	</tr>
	<tr>
		<td>DEBUG</td>
		<td>$E</td>
		<td>DEBUG=cmd=myCommand with %NAME%, %CITY%, %AGE%]</td>
	</tr>
	<tr>
		<td>COMMAND</td>
		<td>$YES</td>
		<td>COMMAND=$YES</td>
	</tr>
	<tr>
		<td>SORT</td>
		<td>YES</td>
		<td>$S=</td>
	</tr>
</tbody></table>
 <br><br><br><table>
	<tbody><tr>
		<td>Table: SheetCommandBase</td>
		<td>TopDefinition3</td>
		<td></td>
		<td>$S</td>
	</tr>
	<tr>
		<td>Key?&lt;1</td>
		<td colspan="3">Value?</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td colspan="3">myCommand with %NAME%, %CITY%, %AGE%</td>
	</tr>
	<tr>
		<td>command</td>
		<td colspan="3">YES</td>
	</tr>
	<tr>
		<td>debug</td>
		<td colspan="3"></td>
	</tr>
	<tr>
		<td>multiline2</td>
		<td colspan="3">Hello
World</td>
	</tr>
	<tr>
		<td>sort</td>
		<td colspan="3">YES</td>
	</tr>
</tbody></table>
<br><br><br></div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables.PropertyDefinitionViaAScript1\"
 
class=\"link\">JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables.PropertyDefinitionViaAScript</a>\r\n\t<span
 class=\"\">(0,016 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:36.363636%\">Running&nbsp;tests&nbsp;...&nbsp;(17/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables.RemovingDefinitions"class="test_name">JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables.RemovingDefinitions</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>It is good practise to clean up definitions which are not required any more.<br><br><br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>ObsoleteDefinition</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>DBUSER</td>
		<td>na</td>
	</tr>
	<tr>
		<td>DBPASSWORD</td>
		<td>na</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>Script</td>
		<td>Define Properties</td>
		<td></td>
	</tr>
	<tr>
		<td>removeDefinition</td>
		<td colspan="2">ObsoleteDefinition</td>
	</tr>
</tbody></table>
<br><br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
</ul></div>
<br></div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables.RemovingDefinitions1\"
 
class=\"link\">JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.FeatureOverviewOfPropertyFilesAndTables.RemovingDefinitions</a>\r\n\t<span
 class=\"\">(0,015 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:38.636364%\">Running&nbsp;tests&nbsp;...&nbsp;(18/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.UsingProperties"class="test_name">JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.UsingProperties</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>In case you need to pass more parameters then user and password to open the database connection <br>then you can define these in a separate list and pass this list with the parameter <b>dbProperties</b> to the jdbc open connection function <br><br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>DatabaseProperties</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>USER</td>
		<td>na</td>
	</tr>
	<tr>
		<td>PASSWORD</td>
		<td>na</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>ConnectionWithProperties</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>jdbcDriver</td>
		<td>org.h2.Driver</td>
	</tr>
	<tr>
		<td>DBURL</td>
		<td>jdbc:h2:mem:h2db;DB_CLOSE_DELAY=-1</td>
	</tr>
	<tr>
		<td>DBProperties</td>
		<td>DatabaseProperties</td>
	</tr>
	<tr>
		<td>CMD</td>
		<td></td>
	</tr>
</tbody></table>
<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>ConnectionWithProperties</td>
		<td>select * from TestData where ID = '1'</td>
		<td colspan="2">Query</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>Name</td>
		<td>Phone</td>
		<td>City</td>
		<td>Profession</td>
	</tr>
	<tr>
		<td>1</td>
		<td>Bill</td>
		<td>12345</td>
		<td>Berlin</td>
		<td>Doctor</td>
	</tr>
</tbody></table>
</div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.UsingProperties1\"
 
class=\"link\">JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.UsingProperties</a>\r\n\t<span
 class=\"\">(0,016 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:40.909092%\">Running&nbsp;tests&nbsp;...&nbsp;(19/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands"class="test_name">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>The Header line of each SQL Command Table contains input and output columns.<br>Like in a <a href="http://fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.SliM.DecisionTable">DecisionTable</a> output columns are marked with a question mark.<br>All columns without a question mark are input columns.<br><br>If the table has one ore more input columns the SQL command is executed <b>once for each line</b> in the table and the command must return <b>exactly one</b> result row. <br><br>Before
 each execution a string replacement happens. Any occurrence of a column
 name between percent signs is replaced with the actual value of the 
column.<br> <br> <br>Lets take an example. <br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select City from TestData where ID ='%ID%'</td>
	</tr>
	<tr>
		<td>ID</td>
		<td colspan="2">CITY?</td>
	</tr>
	<tr>
		<td>2</td>
		<td colspan="2">Denver</td>
	</tr>
	<tr>
		<td>5</td>
		<td colspan="2">Paris</td>
	</tr>
</tbody></table>
<br>The above table has one input column ID and one output column CITY.<br>For the first line the code: <i>select City from TestData<a title="create page" href="#JdbcSlim.UserGuide.TestData?edit&amp;nonExistent=true">[?]</a> where ID ='2' </i> will be executed and in the result set a column CITY is expected and the value is compared to 'Denver'<br>For the first line the code: <i>select City from TestData<a title="create page" href="#JdbcSlim.UserGuide.TestData?edit&amp;nonExistent=true">[?]</a> where ID ='5' </i> will be executed and in the result set a column CITY is expected and the value is compared to 'Paris'<br><br>If the table has no input columns the SQL command is executed only once. <br>The result set can have more than one row and is compared against all rows in the table.<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select ID, City from TestData where ID in ('2','5')</td>
	</tr>
	<tr>
		<td>ID?</td>
		<td colspan="2">CITY?</td>
	</tr>
	<tr>
		<td>2</td>
		<td colspan="2">Denver</td>
	</tr>
	<tr>
		<td>5</td>
		<td colspan="2">Paris</td>
	</tr>
</tbody></table>
<br>Further Reading:<br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
		<li>
			<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.DefaultInputValues" class="test">Default Input Values +</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.EmptyExpectedCellsAreMarkedAsIgnored" class="test">Empty Expected Cells Are Marked As Ignored +</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.InsertUpdateDelete" class="test">Insert Update Delete +</a>
			<ul class="toc2">
				<li>
					<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.InsertUpdateDelete.CommandChain" class="test pruned">Command Chain +-</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.InsertUpdateDelete.SelectUpdateSelect" class="test pruned">Select Update Select +-</a>
					<span class="pageHelp">: Not working with H2 maybe other jdbcDriver support this</span>
				</li>
			</ul>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.ReplacerStringCanBeAnyName" class="test">Replacer String Can Be Any Name +</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.ResultComparatorsCanBeUsed" class="test">Result Comparators Can Be Used +</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures" class="test">Stored Procedures +</a>
			<ul class="toc2">
				<li>
					<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures.WithInputParamters" class="test">With Input Paramters +</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures.WithOutputParameters" class="test pruned">With Output Parameters +-</a>
				</li>
				<li>
					<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures.WithRecordSetAsOutput" class="test">With Record Set As Output +</a>
				</li>
			</ul>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.UnusedInputColumnsAreFlagged" class="test">Unused Input Columns Are Flagged +</a>
		</li>
	</ul>
</div>
<br><br>  <br></div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands1\" 
class=\"link\">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands</a>\r\n\t<span
 class=\"\">(0,157 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:43.18182%\">Running&nbsp;tests&nbsp;...&nbsp;(20/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.DefaultInputValues"class="test_name">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.DefaultInputValues</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>Some tables have many columns.<br>Inserting new data would require huge tables on the Wiki page.<br>But for many tests only some columns are essential.<br>The same is true for stored procedures with many parameters. A single test should focus on one or two parameters.<br>To keep the tests focused defaults can be defined for input columns.<br><br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>myDefaults</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>City</td>
		<td>Berlin</td>
	</tr>
</tbody></table>
<br> <br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>SelectByCityAndName</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>TestDatabase</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>select * from TestData where Name ='%Name%' and City ='%City%'</td>
	</tr>
	<tr>
		<td>#</td>
		<td>Add above defined defaults to the command definition</td>
	</tr>
	<tr>
		<td>InputDefaults</td>
		<td>myDefaults</td>
	</tr>
</tbody></table>
<br><h3>Table provides City as input - default will not be used</h3>
<table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td colspan="4">SelectByCityAndName</td>
	</tr>
	<tr>
		<td>Name</td>
		<td>City</td>
		<td>ID?</td>
		<td>Phone?</td>
		<td>Profession?</td>
	</tr>
	<tr>
		<td>James</td>
		<td>London</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</tbody></table>
<br><h3>Table doesn't provides City as input - default will be used and a matching record found</h3>
<table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td colspan="5">SelectByCityAndName</td>
	</tr>
	<tr>
		<td>Name</td>
		<td>City?</td>
		<td>ID?</td>
		<td>Phone?</td>
		<td colspan="2">Profession?</td>
	</tr>
	<tr>
		<td>Bill</td>
		<td></td>
		<td></td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</tbody></table>
<br><h3>Table doesn't provides City as input - default will be used but no matching record found</h3>
<table>
	<tbody><tr>
		<td>comment:TODO SQLCommand</td>
		<td colspan="5">SelectByCityAndName</td>
	</tr>
	<tr>
		<td>Name</td>
		<td>City?</td>
		<td>ID?</td>
		<td>Phone?</td>
		<td colspan="2">Profession?</td>
	</tr>
	<tr>
		<td>Ben</td>
		<td></td>
		<td></td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</tbody></table>
</div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.DefaultInputValues2\"
 
class=\"link\">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.DefaultInputValues</a>\r\n\t<span
 class=\"\">(0,031 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:45.454544%\">Running&nbsp;tests&nbsp;...&nbsp;(21/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.EmptyExpectedCellsAreMarkedAsIgnored"class="test_name">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.EmptyExpectedCellsAreMarkedAsIgnored</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>Empty expected values [Profession] are flagged blue and counted as ignored.<br> <br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select Profession from TestData where NAME= '%NAME%' and CITY= '%CITY%'</td>
	</tr>
	<tr>
		<td>NAME</td>
		<td>CITY</td>
		<td>PROFESSION?</td>
	</tr>
	<tr>
		<td>James</td>
		<td>London</td>
		<td></td>
	</tr>
	<tr>
		<td>Bert</td>
		<td>Washington</td>
		<td></td>
	</tr>
	<tr>
		<td>Kim</td>
		<td>New York</td>
		<td></td>
	</tr>
</tbody></table>
</div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.EmptyExpectedCellsAreMarkedAsIgnored2\"
 
class=\"link\">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.EmptyExpectedCellsAreMarkedAsIgnored</a>\r\n\t<span
 class=\"\">(0,016 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:47.727272%\">Running&nbsp;tests&nbsp;...&nbsp;(22/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.InsertUpdateDelete"class="test_name">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.InsertUpdateDelete</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>The SQL Commands <i>Insert</i>, <i>Update</i> and <i>Delete</i> return no normal output.<br>Instead they return the number of rows inserted, updated or deleted in a column called: <b>Count</b><br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>insert into TestData
values (DEFAULT, '%Name%', '%Phone%', '%City%', '%Profession%')</td>
		<td colspan="3">dbgetgeneratedkeys</td>
	</tr>
	<tr>
		<td>SCOPE_IDENTITY()?</td>
		<td>City</td>
		<td>Name</td>
		<td>Phone</td>
		<td>Profession</td>
		<td>Count?</td>
	</tr>
	<tr>
		<td>$ID1=</td>
		<td>Berlin</td>
		<td>Boby</td>
		<td>12345</td>
		<td>Doctor</td>
		<td>1</td>
	</tr>
	<tr>
		<td>$ID2=</td>
		<td>Denver</td>
		<td>Bob</td>
		<td>6789</td>
		<td>Artist</td>
		<td>1</td>
	</tr>
	<tr>
		<td>$ID3=</td>
		<td>Sydney</td>
		<td>Bob</td>
		<td>6789</td>
		<td>Artist</td>
		<td>1</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>update TestData set City='%NewCITY%' where ID ='%ID%'</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>NewCITY</td>
		<td>Count?</td>
	</tr>
	<tr>
		<td>$ID1</td>
		<td>HongKong</td>
		<td>1</td>
	</tr>
	<tr>
		<td>$ID2</td>
		<td>Tokyo</td>
		<td>1</td>
	</tr>
</tbody></table>
<br>By defining the property <b>DbUpdateCount</b> a different column name can be defined.<br><br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>UpdateDatabase</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>TestDatabase</td>
	</tr>
	<tr>
		<td>DbUpdateCount</td>
		<td>HowManyUpdates</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>UpdateDatabase</td>
		<td>update TestData set City='%NewCITY%' where NAME like'%Name%'</td>
	</tr>
	<tr>
		<td>Name</td>
		<td>NewCITY</td>
		<td>HowManyUpdates?</td>
	</tr>
	<tr>
		<td>Bob%</td>
		<td>HongKong</td>
		<td>3</td>
	</tr>
</tbody></table>
<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>delete TestData  where ID &gt;='%ID%'</td>
	</tr>
	<tr>
		<td>ID</td>
		<td colspan="2">Count?</td>
	</tr>
	<tr>
		<td>$ID1</td>
		<td colspan="2">3</td>
	</tr>
	<tr>
		<td>$ID2</td>
		<td colspan="2">0</td>
	</tr>
</tbody></table>
<br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
		<li>
			<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.InsertUpdateDelete.CommandChain" class="test pruned">Command Chain +-</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.InsertUpdateDelete.SelectUpdateSelect" class="test pruned">Select Update Select +-</a>
			<span class="pageHelp">: Not working with H2 maybe other jdbcDriver support this</span>
		</li>
	</ul>
</div>
<br><br></div>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.ReplacerStringCanBeAnyName"class="test_name">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.ReplacerStringCanBeAnyName</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>The name which is used for replacing %X% must not match a column name. It can be any string<br>  <br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select ID,Name from TestData where ID = '%X%'</td>
		<td></td>
	</tr>
	<tr>
		<td>X</td>
		<td>ID?</td>
		<td colspan="2">NAME?</td>
	</tr>
	<tr>
		<td>2</td>
		<td></td>
		<td colspan="2"></td>
	</tr>
	<tr>
		<td>4</td>
		<td></td>
		<td colspan="2"></td>
	</tr>
</tbody></table>
</div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.ReplacerStringCanBeAnyName2\"
 
class=\"link\">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.ReplacerStringCanBeAnyName</a>\r\n\t<span
 class=\"\">(0,016 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:61.363636%\">Running&nbsp;tests&nbsp;...&nbsp;(28/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.ResultComparatorsCanBeUsed"class="test_name">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.ResultComparatorsCanBeUsed</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>Number Comparators can be used<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select ID from TestData where ID = '%X%'</td>
	</tr>
	<tr>
		<td>X</td>
		<td colspan="2">ID?</td>
	</tr>
	<tr>
		<td>2</td>
		<td colspan="2">= 2</td>
	</tr>
	<tr>
		<td>4</td>
		<td colspan="2">&gt; 3</td>
	</tr>
	<tr>
		<td>2</td>
		<td colspan="2">1&lt;_ &lt;3</td>
	</tr>
</tbody></table>
<br><br>String Comparators can be used<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select NAME from TestData where ID = '%ID%'</td>
	</tr>
	<tr>
		<td>ID</td>
		<td colspan="2">NAME?</td>
	</tr>
	<tr>
		<td>2</td>
		<td colspan="2">=~/Be/</td>
	</tr>
	<tr>
		<td>4</td>
		<td colspan="2">=~/Til/</td>
	</tr>
</tbody></table>
<br></div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.ResultComparatorsCanBeUsed2\"
 
class=\"link\">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.ResultComparatorsCanBeUsed</a>\r\n\t<span
 class=\"\">(0,015 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:63.636364%\">Running&nbsp;tests&nbsp;...&nbsp;(29/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures"class="test_name">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
		<li>
			<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures.WithInputParamters" class="test">With Input Paramters +</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures.WithOutputParameters" class="test pruned">With Output Parameters +-</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures.WithRecordSetAsOutput" class="test">With Record Set As Output +</a>
		</li>
	</ul>
</div>
<br><br><br><div class="collapsible closed"><ul><li><a href="#" class="expandall">Expand</a></li><li><a href="#" class="collapseall">Collapse</a></li></ul>
	<p class="title">To avoid side effects we execute the test in a transaction</p>
	<div><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td colspan="3">open Connection</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="2">begin transaction</td>
	</tr>
</tbody></table>
<br></div>
</div>
<br><h3>Calling a SP/function with <b>select</b></h3>
<br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>StoredProcedures</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td>CMD</td>
		<td> select SQRT(%No%) as root
</td>
	</tr>
	<tr>
		<td>debug</td>
		<td></td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>StoredProcedures</td>
	</tr>
	<tr>
		<td>No</td>
		<td>root?</td>
	</tr>
	<tr>
		<td>16</td>
		<td>4.0</td>
	</tr>
</tbody></table>
<br><br><div class="collapsible closed"><ul><li><a href="#" class="expandall">Expand</a></li><li><a href="#" class="collapseall">Collapse</a></li></ul>
	<p class="title">Rollback the change to not impact future tests</p>
	<div><br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td colspan="3">open Connection</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="2">rollback</td>
	</tr>
	<tr>
		<td colspan="3">close Connection</td>
	</tr>
</tbody></table>
<br><h4>Check that the rollback worked</h4>
<table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>StartupDatabase</td>
		<td>select * from TestData</td>
		<td colspan="2">Query</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>Name</td>
		<td>Phone</td>
		<td>City</td>
		<td>Profession</td>
	</tr>
	<tr>
		<td>1</td>
		<td>Bill</td>
		<td>12345</td>
		<td>Berlin</td>
		<td>Doctor</td>
	</tr>
	<tr>
		<td>2</td>
		<td>Ben</td>
		<td>6789</td>
		<td>Denver</td>
		<td>Artist</td>
	</tr>
	<tr>
		<td>3</td>
		<td>Tom</td>
		<td>4567890</td>
		<td>Seoul</td>
		<td>Milkman</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Till</td>
		<td>332211</td>
		<td>Berlin</td>
		<td>Senator</td>
	</tr>
	<tr>
		<td>5</td>
		<td>Sarah</td>
		<td>999999</td>
		<td>Paris</td>
		<td>Hero</td>
	</tr>
	<tr>
		<td>6</td>
		<td>James</td>
		<td>#null#</td>
		<td>London</td>
		<td>Butler</td>
	</tr>
	<tr>
		<td>7</td>
		<td>Bert</td>
		<td>432</td>
		<td>Washington</td>
		<td>President</td>
	</tr>
	<tr>
		<td>8</td>
		<td>Kim</td>
		<td>1</td>
		<td>New York</td>
		<td>Banker</td>
	</tr>
</tbody></table>
<br></div>
</div>
</div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures2\"
 
class=\"link\">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures</a>\r\n\t<span
 class=\"\">(0,031 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:65.90909%\">Running&nbsp;tests&nbsp;...&nbsp;(30/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures.WithInputParamters"class="test_name">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures.WithInputParamters</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br><br><div class="collapsible closed"><ul><li><a href="#" class="expandall">Expand</a></li><li><a href="#" class="collapseall">Collapse</a></li></ul>
	<p class="title">To avoid side effects we execute the test in a transaction</p>
	<div><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td colspan="3">open Connection</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="2">begin transaction</td>
	</tr>
</tbody></table>
<br></div>
</div>
<br><h3>Input Parameters</h3>
<br>To use Input Parameters you have to define a tuple of 3-4 values for each input column.<br>The values are separated with a ":".<br>1. Flag for Input or Output Parameter: I* = input parameter, O* = output parameter, I*O* = input and output parameter <br>2. Position in the statement, the first parameter has number 1<br>3. Integer number of SQL Type see the jdk java documentation or <a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7u40-b43/java/sql/Types.java#Types.0BIT">look here</a><br>4.
 The scale of the data type, might be required for VARCHAR, DECIMAL, 
etc. See the jdbc documentation of your database system. This flag is 
optional  <br><br><h4>These flags are defined in a separate Properties definition.</h4>
<br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>inParameters</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>FILL</td>
		<td>I:3:12:0</td>
	</tr>
	<tr>
		<td>No</td>
		<td>in:1:8:0</td>
	</tr>
	<tr>
		<td>inStr</td>
		<td>Input:1:12</td>
	</tr>
	<tr>
		<td>c</td>
		<td>i:2:4</td>
	</tr>
</tbody></table>
<br><h4>Link this definition to the query with the <b>dbQueryParameters</b> key</h4>
To avoid that the input columns are flageed red (as they are not used in string command replacements) add also the flag <b>outputFlagUnusedInputColumns=false</b><br>   <br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
		<td>select SQRT(?) as root</td>
		<td>dbQueryParameters=inParameters outputFlagUnusedInputColumns=false</td>
	</tr>
	<tr>
		<td>No</td>
		<td colspan="3">root?</td>
	</tr>
	<tr>
		<td>9.0</td>
		<td colspan="3">3.0</td>
	</tr>
	<tr>
		<td>16.0</td>
		<td colspan="3">4.0</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
		<td>select LPAD(?, ?, ?) as myString</td>
		<td>dbQueryParameters=inParameters outputFlagUnusedInputColumns=false</td>
	</tr>
	<tr>
		<td>inStr</td>
		<td>c</td>
		<td>FILL</td>
		<td>myString?</td>
	</tr>
	<tr>
		<td>xYz</td>
		<td>7</td>
		<td>*</td>
		<td>****xYz</td>
	</tr>
	<tr>
		<td>ABC</td>
		<td>5</td>
		<td>-</td>
		<td>--ABC</td>
	</tr>
</tbody></table>
<br>                                                             |<br><br><div class="collapsible closed"><ul><li><a href="#" class="expandall">Expand</a></li><li><a href="#" class="collapseall">Collapse</a></li></ul>
	<p class="title">Rollback the change to not impact future tests</p>
	<div><br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>TransactionDatabase</td>
	</tr>
	<tr>
		<td colspan="3">open Connection</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="2">rollback</td>
	</tr>
	<tr>
		<td colspan="3">close Connection</td>
	</tr>
</tbody></table>
<br><h4>Check that the rollback worked</h4>
<table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>StartupDatabase</td>
		<td>select * from TestData</td>
		<td colspan="2">Query</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>Name</td>
		<td>Phone</td>
		<td>City</td>
		<td>Profession</td>
	</tr>
	<tr>
		<td>1</td>
		<td>Bill</td>
		<td>12345</td>
		<td>Berlin</td>
		<td>Doctor</td>
	</tr>
	<tr>
		<td>2</td>
		<td>Ben</td>
		<td>6789</td>
		<td>Denver</td>
		<td>Artist</td>
	</tr>
	<tr>
		<td>3</td>
		<td>Tom</td>
		<td>4567890</td>
		<td>Seoul</td>
		<td>Milkman</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Till</td>
		<td>332211</td>
		<td>Berlin</td>
		<td>Senator</td>
	</tr>
	<tr>
		<td>5</td>
		<td>Sarah</td>
		<td>999999</td>
		<td>Paris</td>
		<td>Hero</td>
	</tr>
	<tr>
		<td>6</td>
		<td>James</td>
		<td>#null#</td>
		<td>London</td>
		<td>Butler</td>
	</tr>
	<tr>
		<td>7</td>
		<td>Bert</td>
		<td>432</td>
		<td>Washington</td>
		<td>President</td>
	</tr>
	<tr>
		<td>8</td>
		<td>Kim</td>
		<td>1</td>
		<td>New York</td>
		<td>Banker</td>
	</tr>
</tbody></table>
<br></div>
</div>
</div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures.WithInputParamters3\"
 
class=\"link\">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures.WithInputParamters</a>\r\n\t<span
 class=\"\">(0,016 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:68.181816%\">Running&nbsp;tests&nbsp;...&nbsp;(31/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures.WithRecordSetAsOutput"class="test_name">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures.WithRecordSetAsOutput</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br><br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
	</tr>
	<tr>
		<td colspan="3">open Connection</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="2">create alias IF NOT EXISTS selectStar for "six42.fitnesse.jdbcslim.SampleStoredProcedure.showTestData"</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="2">success</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="2">rawResult</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="2">resultSheet</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="2">create alias IF NOT EXISTS myQuery for "six42.fitnesse.jdbcslim.SampleStoredProcedure.myquery"</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="2">success</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="2">rawResult</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="2">resultSheet</td>
	</tr>
	<tr>
		<td colspan="3">close Connection</td>
	</tr>
</tbody></table>
<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>call myquery('select * from TestData where Profession = ''Milkman''')</td>
		<td colspan="2">QUERY</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>Name</td>
		<td>Phone</td>
		<td>City</td>
		<td>Profession</td>
	</tr>
	<tr>
		<td>3</td>
		<td>Tom</td>
		<td>4567890</td>
		<td>Seoul</td>
		<td>Milkman</td>
	</tr>
</tbody></table>
<br></div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures.WithRecordSetAsOutput3\"
 
class=\"link\">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures.WithRecordSetAsOutput</a>\r\n\t<span
 class=\"\">(0,016 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:70.454544%\">Running&nbsp;tests&nbsp;...&nbsp;(32/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.UnusedInputColumnsAreFlagged"class="test_name">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.UnusedInputColumnsAreFlagged</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>Unused Input column names like [AGE] below are flagged as fail.<br>In such a case either the command should be adjusted or the column should be removed.<br><br><div class="collapsible closed"><ul><li><a href="#" class="expandall">Expand</a></li><li><a href="#" class="collapseall">Collapse</a></li></ul>
	<p class="title">Included page: <a href="http://fitnesse.org/FitNesse.SuiteAcceptanceTests.SuiteSlimTests.SetUp">.FitNesse.SuiteAcceptanceTests.SuiteSlimTests.SetUp</a> <a href="http://fitnesse.org/FitNesse.SuiteAcceptanceTests.SuiteSlimTests.SetUp?edit&amp;redirectToReferer=true&amp;redirectAction=" class="edit"></a></p>
	<div><table>
	<tbody><tr>
		<td>Import</td>
	</tr>
	<tr>
		<td>fitnesse.fixtures</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>SetUp</td>
		<td>CustomComparators=glob:fitnesse.testsystems.slim.GlobComparator</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>Library</td>
	</tr>
	<tr>
		<td>page driver</td>
	</tr>
	<tr>
		<td>echo fixture</td>
	</tr>
</tbody></table>
</div>
</div>
<br><br><br><br><span class="meta">variable defined: TestPageName=TestPage</span>
<br><br><table>
	<tbody><tr>
		<td colspan="9">script</td>
	</tr>
	<tr>
		<td>given Jdbc Slim test page</td>
		<td colspan="8">TestPage</td>
	</tr>
	<tr>
		<td>and test content is</td>
		<td colspan="8">

!|SQLCommand|TestDatabase|select Profession from TestData where NAME= '%NAME%' and CITY= '%CITY%'|
|NAME       |CITY        |AGE                            |PROFESSION?                            |
|James      |London      |43                             |                                       |
|Bert       |Washington  |50                             |                                       |
|Kim        |New York    |60                             |                                       |

</td>
	</tr>
	<tr>
		<td>when page</td>
		<td>TestPage</td>
		<td colspan="7">is tested and HTML is extracted</td>
	</tr>
	<tr>
		<td>then</td>
		<td>\d</td>
		<td>assertions pass,</td>
		<td>2</td>
		<td>fail,</td>
		<td>3</td>
		<td>are ignored</td>
		<td>0</td>
		<td>exceptions thrown</td>
	</tr>
	<tr>
		<td>and cell</td>
		<td>AGE</td>
		<td>has result</td>
		<td colspan="6">fail</td>
	</tr>
	<tr>
		<td>show Symbol</td>
		<td colspan="8">$HTML_Input</td>
	</tr>
	<tr>
		<td>show Symbol</td>
		<td colspan="8">$HTML_Result</td>
	</tr>
	<tr>
		<td>get collapsed executon log for page</td>
		<td colspan="8">TestPage</td>
	</tr>
</tbody></table>
<br><br><br><div class="collapsible closed"><ul><li><a href="#" class="expandall">Expand</a></li><li><a href="#" class="collapseall">Collapse</a></li></ul>
	<p class="title">Included page: <a href="http://fitnesse.org/FitNesse.SuiteAcceptanceTests.TearDown">.FitNesse.SuiteAcceptanceTests.TearDown</a> <a href="http://fitnesse.org/FitNesse.SuiteAcceptanceTests.TearDown?edit&amp;redirectToReferer=true&amp;redirectAction=" class="edit"></a></p>
	<div><hr>
<br><table>
	<tbody><tr>
		<td>tear down</td>
	</tr>
</tbody></table>
<br></div>
</div>
</div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.UnusedInputColumnsAreFlagged3\"
 
class=\"link\">JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.UnusedInputColumnsAreFlagged</a>\r\n\t<span
 class=\"\">(0,047 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:72.72727%\">Running&nbsp;tests&nbsp;...&nbsp;(33/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.5ParametersOfTheSQLCommand"class="test_name">JdbcSlim.UserGuide.5ParametersOfTheSQLCommand</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>The SQL Command can be called with 1, 2 or 3 constructor parameters<br><br><h3>Constructor with one parameter</h3>
In this case the parameter must be the name of a configuration either defined in a file or a table.<br>In addition the configuration must contain a "CMD" key with the sql code.<br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>AllInOne</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>TestDatabase</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>select ID, NAME from TestData where Name ='%NAME%'</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>AllInOne</td>
	</tr>
	<tr>
		<td>ID?</td>
		<td>NAME</td>
	</tr>
	<tr>
		<td>$TestID=</td>
		<td>Ben</td>
	</tr>
	<tr>
		<td>$TestID2=</td>
		<td>Sarah</td>
	</tr>
</tbody></table>
<br><h3>Constructor with two parameter</h3>
In this case the first parameter must be the name of a configuration either defined in a file or a table.<br>The second parameter must be the SQL code to be executed.<br><br>SQL Query  only with Header with Input and Output Columns and with expected value <br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select * from TestData
where ID = '%ID%'</td>
		<td colspan="2"></td>
	</tr>
	<tr>
		<td>ID</td>
		<td>Name?</td>
		<td>Phone?</td>
		<td>City?</td>
		<td>Profession?</td>
	</tr>
	<tr>
		<td>3</td>
		<td>Tom</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</tbody></table>
<br><h3>Constructor with three parameter</h3>
In this case the first parameter must be the name of a configuration either defined in a file or a table.<br>The second parameter must be the SQL code to be executed<br>The third parameter can contain a list of further configuration parameters. The elements must be separated by spaces.<br> <br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select ID,Name from TestData where ID in('3','5')</td>
		<td>SORT=true debug=true</td>
	</tr>
	<tr>
		<td>ID?&lt;</td>
		<td colspan="3">NAME?</td>
	</tr>
	<tr>
		<td>3</td>
		<td colspan="3">Tom</td>
	</tr>
	<tr>
		<td>5</td>
		<td colspan="3">Sarah</td>
	</tr>
</tbody></table>
<br></div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.5ParametersOfTheSQLCommand3\" 
class=\"link\">JdbcSlim.UserGuide.5ParametersOfTheSQLCommand</a>\r\n\t<span
 class=\"\">(0,015 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:75.0%\">Running&nbsp;tests&nbsp;...&nbsp;(34/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.6OutputOptions"class="test_name">JdbcSlim.UserGuide.6OutputOptions</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
		<li>
			<a href="#JdbcSlim.UserGuide.6OutputOptions.ColumnAlias" class="test">Column Alias +</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.6OutputOptions.Sorting" class="test">Sorting +</a>
			<ul class="toc2">
				<li>
					<a href="#JdbcSlim.UserGuide.6OutputOptions.Sorting.SortNumbers" class="test">Sort Numbers +</a>
				</li>
			</ul>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.6OutputOptions.SubQuery" class="test">Sub Query +</a>
		</li>
		<li>
			<a href="#JdbcSlim.UserGuide.6OutputOptions.TotalOnly" class="test">Total Only +</a>
		</li>
	</ul>
</div>
<br></div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.6OutputOptions3\" 
class=\"link\">JdbcSlim.UserGuide.6OutputOptions</a>\r\n\t<span 
class=\"\">(0,047 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:77.27273%\">Running&nbsp;tests&nbsp;...&nbsp;(35/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.6OutputOptions.ColumnAlias"class="test_name">JdbcSlim.UserGuide.6OutputOptions.ColumnAlias</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br><br>If your query defines an alias for a column name like below "firstname" then you must use this name in the header.<br> <br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select ID, Name as firstname from TestData</td>
		<td>SORT SUBQUERY</td>
	</tr>
	<tr>
		<td>ID?&gt;</td>
		<td colspan="3">firstname?</td>
	</tr>
	<tr>
		<td>5</td>
		<td colspan="3">Sarah</td>
	</tr>
	<tr>
		<td>3</td>
		<td colspan="3">Tom</td>
	</tr>
</tbody></table>
<br><br>If you must use the table column name then add the flag <b>dbUseColumnName</b><br> <br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select ID, Name as firstname from TestData</td>
		<td>SORT SUBQUERY dbUseColumnName</td>
	</tr>
	<tr>
		<td>ID?&gt;</td>
		<td colspan="3">Name?</td>
	</tr>
	<tr>
		<td>5</td>
		<td colspan="3">Sarah</td>
	</tr>
	<tr>
		<td>3</td>
		<td colspan="3">Tom</td>
	</tr>
</tbody></table>
</div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.6OutputOptions.ColumnAlias3\" 
class=\"link\">JdbcSlim.UserGuide.6OutputOptions.ColumnAlias</a>\r\n\t<span
 class=\"\">(0,016 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:79.545456%\">Running&nbsp;tests&nbsp;...&nbsp;(36/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.6OutputOptions.Sorting"class="test_name">JdbcSlim.UserGuide.6OutputOptions.Sorting</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>The below only applies to commands without any input values. Only these can return more than one row.<br><br>The
 SQL code should sort the result set so that it matches the expected 
values.  If this is not possible as it is the output of a stored 
procedure the fixture can sort the actual result set. Expected values 
are never sorted. You have to provide them already in the order you 
expect them.<br><br>Use the symbol &lt; to sort ascending  and &gt; to 
sort descending. Add this symbol to the end of the column name in the 
header. Finally add the keyword SORT as third parameter to the SQL 
command. Or add SORT as a key into a configuration property.<br><br>SQL Query  sorted ascending on ID<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select ID,Name from TestData where ID in('3','5')</td>
		<td>SORT</td>
	</tr>
	<tr>
		<td>ID?&lt;</td>
		<td colspan="3">NAME?</td>
	</tr>
	<tr>
		<td>3</td>
		<td colspan="3">Tom</td>
	</tr>
	<tr>
		<td>5</td>
		<td colspan="3">Sarah</td>
	</tr>
</tbody></table>
<br>SQL Query  sorted descending on ID<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select ID, Name from TestData where ID in('3','5')</td>
		<td>SORT</td>
	</tr>
	<tr>
		<td>ID?&gt;</td>
		<td colspan="3">NAME?</td>
	</tr>
	<tr>
		<td>5</td>
		<td colspan="3">Sarah</td>
	</tr>
	<tr>
		<td>3</td>
		<td colspan="3">Tom</td>
	</tr>
</tbody></table>
<br>SQL Query  sorted descending on Name<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select ID,Name from TestData where Name in('Tom','Sarah')</td>
		<td>SORT</td>
	</tr>
	<tr>
		<td>ID?</td>
		<td colspan="3">NAME?&gt;</td>
	</tr>
	<tr>
		<td>3</td>
		<td colspan="3">Tom</td>
	</tr>
	<tr>
		<td>5</td>
		<td colspan="3">Sarah</td>
	</tr>
</tbody></table>
<br>SQL Query  sorted first descending on City and second ascending on Name<br>adding the QUERY tag allows to omit the question mark at each header column name.<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select * from TestData</td>
		<td colspan="2">SORT   QUERY</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>City&gt;</td>
		<td>Name&lt;</td>
		<td>Phone</td>
		<td>Profession</td>
	</tr>
	<tr>
		<td>7</td>
		<td>Washington</td>
		<td>Bert</td>
		<td>432</td>
		<td>President</td>
	</tr>
	<tr>
		<td>3</td>
		<td>Seoul</td>
		<td>Tom</td>
		<td>4567890</td>
		<td>Milkman</td>
	</tr>
	<tr>
		<td>5</td>
		<td>Paris</td>
		<td>Sarah</td>
		<td>999999</td>
		<td>Hero</td>
	</tr>
	<tr>
		<td>8</td>
		<td>New York</td>
		<td>Kim</td>
		<td>1</td>
		<td>Banker</td>
	</tr>
	<tr>
		<td>6</td>
		<td>London</td>
		<td>James</td>
		<td>#null#</td>
		<td>Butler</td>
	</tr>
	<tr>
		<td>2</td>
		<td>Denver</td>
		<td>Ben</td>
		<td>6789</td>
		<td>Artist</td>
	</tr>
	<tr>
		<td>1</td>
		<td>Berlin</td>
		<td>Bill</td>
		<td>12345</td>
		<td>Doctor</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Berlin</td>
		<td>Till</td>
		<td>332211</td>
		<td>Senator</td>
	</tr>
</tbody></table>
<br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
		<li>
			<a href="#JdbcSlim.UserGuide.6OutputOptions.Sorting.SortNumbers" class="test">Sort Numbers +</a>
		</li>
	</ul>
</div>
<br></div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.6OutputOptions.Sorting3\" 
class=\"link\">JdbcSlim.UserGuide.6OutputOptions.Sorting</a>\r\n\t<span 
class=\"\">(0,031 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:81.818184%\">Running&nbsp;tests&nbsp;...&nbsp;(37/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.6OutputOptions.Sorting.SortNumbers"class="test_name">JdbcSlim.UserGuide.6OutputOptions.Sorting.SortNumbers</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br><br>Given a field like 'Phone' contains numbers <br>Then the column must be sorted based on number logic and not string logic.<br><br>use the flag 'd' next to the sort indicator to indicate integral decimal sorting<br>use the flag 'f' to indicate floating point sorting<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select * from TestData</td>
		<td colspan="2">SORT   QUERY</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>City</td>
		<td>Name</td>
		<td>Phone&lt;d</td>
		<td>Profession</td>
	</tr>
	<tr>
		<td>6</td>
		<td>London</td>
		<td>James</td>
		<td>#null#</td>
		<td>Butler</td>
	</tr>
	<tr>
		<td>8</td>
		<td>New York</td>
		<td>Kim</td>
		<td>1</td>
		<td>Banker</td>
	</tr>
	<tr>
		<td>7</td>
		<td>Washington</td>
		<td>Bert</td>
		<td>432</td>
		<td>President</td>
	</tr>
	<tr>
		<td>2</td>
		<td>Denver</td>
		<td>Ben</td>
		<td>6789</td>
		<td>Artist</td>
	</tr>
	<tr>
		<td>1</td>
		<td>Berlin</td>
		<td>Bill</td>
		<td>12345</td>
		<td>Doctor</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Berlin</td>
		<td>Till</td>
		<td>332211</td>
		<td>Senator</td>
	</tr>
	<tr>
		<td>5</td>
		<td>Paris</td>
		<td>Sarah</td>
		<td>999999</td>
		<td>Hero</td>
	</tr>
	<tr>
		<td>3</td>
		<td>Seoul</td>
		<td>Tom</td>
		<td>4567890</td>
		<td>Milkman</td>
	</tr>
</tbody></table>
<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select * from TestData</td>
		<td colspan="2">SORT   QUERY</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>City</td>
		<td>Name</td>
		<td>Phone&lt;f</td>
		<td>Profession</td>
	</tr>
	<tr>
		<td>6</td>
		<td>London</td>
		<td>James</td>
		<td>#null#</td>
		<td>Butler</td>
	</tr>
	<tr>
		<td>8</td>
		<td>New York</td>
		<td>Kim</td>
		<td>1</td>
		<td>Banker</td>
	</tr>
	<tr>
		<td>7</td>
		<td>Washington</td>
		<td>Bert</td>
		<td>432</td>
		<td>President</td>
	</tr>
	<tr>
		<td>2</td>
		<td>Denver</td>
		<td>Ben</td>
		<td>6789</td>
		<td>Artist</td>
	</tr>
	<tr>
		<td>1</td>
		<td>Berlin</td>
		<td>Bill</td>
		<td>12345</td>
		<td>Doctor</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Berlin</td>
		<td>Till</td>
		<td>332211</td>
		<td>Senator</td>
	</tr>
	<tr>
		<td>5</td>
		<td>Paris</td>
		<td>Sarah</td>
		<td>999999</td>
		<td>Hero</td>
	</tr>
	<tr>
		<td>3</td>
		<td>Seoul</td>
		<td>Tom</td>
		<td>4567890</td>
		<td>Milkman</td>
	</tr>
</tbody></table>
<br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
</ul></div>
<br></div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.6OutputOptions.Sorting.SortNumbers3\" 
class=\"link\">JdbcSlim.UserGuide.6OutputOptions.Sorting.SortNumbers</a>\r\n\t<span
 class=\"\">(0,032 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:84.09091%\">Running&nbsp;tests&nbsp;...&nbsp;(38/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.6OutputOptions.SubQuery"class="test_name">JdbcSlim.UserGuide.6OutputOptions.SubQuery</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br><br>If the query returns many rows but you just want to check some of them and want to ignore the others use the SUBQUERY flag.<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select ID, Name from TestData</td>
		<td>SORT SUBQUERY</td>
	</tr>
	<tr>
		<td>ID?&gt;</td>
		<td colspan="3">NAME?</td>
	</tr>
	<tr>
		<td>5</td>
		<td colspan="3">Sarah</td>
	</tr>
	<tr>
		<td>3</td>
		<td colspan="3">Tom</td>
	</tr>
</tbody></table>
</div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.6OutputOptions.SubQuery3\" 
class=\"link\">JdbcSlim.UserGuide.6OutputOptions.SubQuery</a>\r\n\t<span
 class=\"\">(0,015 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:86.36364%\">Running&nbsp;tests&nbsp;...&nbsp;(39/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.6OutputOptions.TotalOnly"class="test_name">JdbcSlim.UserGuide.6OutputOptions.TotalOnly</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br><br>If you just want to see the row count of the recordset set the flag <b>dbOnlyRowCount</b> to the name of the column which should show the row count.<br>In this case you might want to measure performance. To do so set also one or all of the following:<br><b>dbPerf</b> - Total processing time in seconds<br><b>dbPerfRetrieval</b> - Time to get all rows and columns from the recordset from the database server into the application server <br><b>dbPerfExecution</b> - Time to execute the statement on the database server  <br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select d1.*, d2.*, d3.*, d4.*, d5.*
from TestData d1 join TestData d2 join TestData d3 join TestData d4 join TestData d5 </td>
		<td>dbOnlyRowCount=RowCount dbPerf=ProcessingTime dbPerfRetrieval=RetrievalTime dbPerfExecution=ExecutionTime</td>
	</tr>
	<tr>
		<td>RowCount?</td>
		<td>ProcessingTime?</td>
		<td>RetrievalTime?</td>
		<td>ExecutionTime?</td>
	</tr>
	<tr>
		<td>32768</td>
		<td>&lt;1</td>
		<td>&lt;1</td>
		<td>&lt;1</td>
	</tr>
</tbody></table>
<br><br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>%SQL%</td>
		<td colspan="2">dbOnlyRowCount=RowCount 
dbPerf=ProcessingTime 
dbPerfRetrieval=RetrievalTime 
dbPerfExecution=ExecutionTime</td>
	</tr>
	<tr>
		<td>SQL</td>
		<td>RowCount?</td>
		<td>ProcessingTime?</td>
		<td>RetrievalTime?</td>
		<td>ExecutionTime?</td>
	</tr>
	<tr>
		<td>select d1.*, d2.*, d3.*
from TestData d1 
join TestData d2 
join TestData d3 </td>
		<td>512</td>
		<td>&lt;1</td>
		<td>&lt;1</td>
		<td>&lt;1</td>
	</tr>
	<tr>
		<td>select d1.*, d2.*, d3.*, d4.*
from TestData d1 
join TestData d2 
join TestData d3 
join TestData d4 </td>
		<td>4096</td>
		<td>&lt;1</td>
		<td>&lt;1</td>
		<td>&lt;1</td>
	</tr>
	<tr>
		<td>select d1.*, d2.*, d3.*, d4.*, d5.*
from TestData d1 
join TestData d2 
join TestData d3 
join TestData d4 
join TestData d5 </td>
		<td>32768</td>
		<td>&lt;5</td>
		<td>&lt;5</td>
		<td>&lt;5</td>
	</tr>
</tbody></table>
</div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.6OutputOptions.TotalOnly3\" 
class=\"link\">JdbcSlim.UserGuide.6OutputOptions.TotalOnly</a>\r\n\t<span
 class=\"\">(0,016 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:88.63636%\">Running&nbsp;tests&nbsp;...&nbsp;(40/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.7UsingSqlInScriptsAndScenarios"class="test_name">JdbcSlim.UserGuide.7UsingSqlInScriptsAndScenarios</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
		<li>
			<a href="#JdbcSlim.UserGuide.7UsingSqlInScriptsAndScenarios.SymbolAssignmentOfResults" class="test">Symbol Assignment Of Results +</a>
		</li>
	</ul>
</div>
<br><br>This page demonstrates the SQL Command fixture in a script and a scenario.<br>The scenario uses two  queries.<br>It also shows additional methods available to analyse the returned data.<br><br><h1>Calling the SQLCommand directly in a Script</h1>
<br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>ScriptDefinition</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>TestDatabase</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>select * from TestData</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>ScriptDefinition</td>
	</tr>
	<tr>
		<td colspan="3">openConnection</td>
	</tr>
	<tr>
		<td colspan="3">execute</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="2">success</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="2">rawResult</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="2">resultSheet</td>
	</tr>
	<tr>
		<td>$RSOne=</td>
		<td colspan="2">resultSheet</td>
	</tr>
	<tr>
		<td colspan="3">closeConnection</td>
	</tr>
</tbody></table>
<br><h1>Using SQLCommand in a scenario</h1>
<br><h2>The Scenario with two execute statements</h2>
<table>
	<tbody><tr>
		<td>Scenario</td>
		<td>TheId</td>
		<td>id</td>
		<td>isNamed</td>
		<td>name</td>
		<td>andHasPhone</td>
		<td>phone</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="6">select Name from TestData where ID = '@id'</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="6">success</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="6">rawResult</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="6">resultSheet</td>
	</tr>
	<tr>
		<td>check</td>
		<td>getColumnValueByName</td>
		<td>NAME</td>
		<td colspan="4">@name</td>
	</tr>
	<tr>
		<td colspan="7">#</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="6">select * from TestData where ID = '@id'</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="6">success</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="6">rawResult</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="6">resultSheet</td>
	</tr>
	<tr>
		<td>check</td>
		<td>getColumnValueByName</td>
		<td>Phone</td>
		<td colspan="4">@phone</td>
	</tr>
</tbody></table>
<br><br><br><h2>Start the test</h2>
<h3>Open a connection</h3>
<table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>ScriptDefinition</td>
	</tr>
	<tr>
		<td colspan="3">openConnection</td>
	</tr>
</tbody></table>
<br><br><h3>Call the scenario in a Decision Table</h3>
<br><table>
	<tbody><tr>
		<td colspan="3">The Id  Is Named And Has Phone</td>
	</tr>
	<tr>
		<td>id</td>
		<td>name</td>
		<td>phone</td>
	</tr>
	<tr>
		<td>2</td>
		<td>Ben</td>
		<td>&gt;0</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Till</td>
		<td>&gt;100</td>
	</tr>
	<tr>
		<td>3</td>
		<td>Tom</td>
		<td>&gt;10</td>
	</tr>
	<tr>
		<td>2</td>
		<td>=~/Be/</td>
		<td>&gt;5</td>
	</tr>
</tbody></table>
<br><h3>Call the scenario in a Script Table</h3>
<br><table>
	<tbody><tr>
		<td colspan="6">script</td>
	</tr>
	<tr>
		<td>TheId</td>
		<td>5</td>
		<td>IsNamed</td>
		<td>Sarah</td>
		<td>AndHasPhone</td>
		<td>999999</td>
	</tr>
</tbody></table>
<br><br><h3>Close the connection</h3>
<table>
	<tbody><tr>
		<td>Script</td>
	</tr>
	<tr>
		<td>closeConnection</td>
	</tr>
</tbody></table>
</div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.7UsingSqlInScriptsAndScenarios4\" 
class=\"link\">JdbcSlim.UserGuide.7UsingSqlInScriptsAndScenarios</a>\r\n\t<span
 class=\"\">(0,015 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:90.90909%\">Running&nbsp;tests&nbsp;...&nbsp;(41/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.7UsingSqlInScriptsAndScenarios.SymbolAssignmentOfResults"class="test_name">JdbcSlim.UserGuide.7UsingSqlInScriptsAndScenarios.SymbolAssignmentOfResults</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
</ul></div>
<br><br>This page calls the SQL Command fixture in a scenario<br>Results returned are assigned to symbols and can be used in future queries or fixtures.<br><br><div class="collapsible closed"><ul><li><a href="#" class="expandall">Expand</a></li><li><a href="#" class="collapseall">Collapse</a></li></ul>
	<p class="title">setup</p>
	<div><br><br><table>
	<tbody><tr>
		<td>import</td>
	</tr>
	<tr>
		<td>fitnesse.slim.test</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>library</td>
	</tr>
	<tr>
		<td>echo script</td>
	</tr>
</tbody></table>
<br><br></div>
</div>
<br><br><h5>Assign results from a query to symbols</h5>
<table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select Id, Name from TestData where ID = '%X%'</td>
	</tr>
	<tr>
		<td>X</td>
		<td>ID?</td>
		<td>NAME?</td>
	</tr>
	<tr>
		<td>2</td>
		<td>&lt;= 3</td>
		<td>$Name2=</td>
	</tr>
	<tr>
		<td>4</td>
		<td>&gt;= 4</td>
		<td>$Name4=</td>
	</tr>
	<tr>
		<td>2</td>
		<td>1&lt;_ &lt;3</td>
		<td>Ben</td>
	</tr>
	<tr>
		<td>3</td>
		<td>$Id3=</td>
		<td></td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td colspan="4">script</td>
	</tr>
	<tr>
		<td>check</td>
		<td>echo</td>
		<td>$Name2</td>
		<td>Ben</td>
	</tr>
	<tr>
		<td>check</td>
		<td>echo</td>
		<td>$Name4</td>
		<td>Till</td>
	</tr>
	<tr>
		<td>check</td>
		<td>echo</td>
		<td>$Id3</td>
		<td>3</td>
	</tr>
</tbody></table>
 <br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>DefinitionOne</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>cmd</td>
		<td>select * from Elements where ID = '%X%'</td>
	</tr>
	<tr>
		<td>.include</td>
		<td>TestDatabase</td>
	</tr>
</tbody></table>
<br><br><br><br><br><h1>Scenario with two execute statements returning the result in symbols</h1>
<table>
	<tbody><tr>
		<td>Scenario</td>
		<td>TheId</td>
		<td>id</td>
		<td>isNamed</td>
		<td>name</td>
		<td>andHasPhone</td>
		<td>phone</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="6">select * from TestData where ID = '@id'</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="6">success</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="6">rawResult</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="6">resultSheet</td>
	</tr>
	<tr>
		<td>$name=</td>
		<td>getColumnValueByName</td>
		<td>Name</td>
		<td colspan="4"></td>
	</tr>
	<tr>
		<td colspan="7">#</td>
	</tr>
	<tr>
		<td>execute</td>
		<td colspan="6">select * from TestData where ID = '@id'</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="6">success</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="6">rawResult</td>
	</tr>
	<tr>
		<td>show</td>
		<td colspan="6">resultSheet</td>
	</tr>
	<tr>
		<td>$phone=</td>
		<td>getColumnValueByName</td>
		<td>Phone</td>
		<td colspan="4"></td>
	</tr>
</tbody></table>
<br><br><br><h1>Start the test</h1>
<h3>Open a connection</h3>
<table>
	<tbody><tr>
		<td>Script</td>
		<td>SQLCommand</td>
		<td>DefinitionOne</td>
	</tr>
	<tr>
		<td colspan="3">openConnection</td>
	</tr>
</tbody></table>
<br><br><h3>Call the scenario</h3>
<br><table>
	<tbody><tr>
		<td colspan="3">TheIdIsNamedAndHasPhone</td>
	</tr>
	<tr>
		<td>id</td>
		<td>name?</td>
		<td>phone?</td>
	</tr>
	<tr>
		<td>2</td>
		<td>$Name2=</td>
		<td>&gt;0</td>
	</tr>
	<tr>
		<td>4</td>
		<td>$Name44=</td>
		<td>&gt;100</td>
	</tr>
	<tr>
		<td>3</td>
		<td>Tom</td>
		<td>$Phone3=</td>
	</tr>
	<tr>
		<td>2</td>
		<td>=~/Be/</td>
		<td>&gt;5</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td colspan="4">script</td>
	</tr>
	<tr>
		<td>check</td>
		<td>echo</td>
		<td>$Name2</td>
		<td>Ben</td>
	</tr>
	<tr>
		<td>check</td>
		<td>echo</td>
		<td>$Name44</td>
		<td>Till</td>
	</tr>
	<tr>
		<td>check</td>
		<td>echo</td>
		<td>$Phone3</td>
		<td>4567890</td>
	</tr>
</tbody></table>
<br><br><h3>Close the connection</h3>
<table>
	<tbody><tr>
		<td>Script</td>
	</tr>
	<tr>
		<td>closeConnection</td>
	</tr>
</tbody></table>
</div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.7UsingSqlInScriptsAndScenarios.SymbolAssignmentOfResults4\"
 
class=\"link\">JdbcSlim.UserGuide.7UsingSqlInScriptsAndScenarios.SymbolAssignmentOfResults</a>\r\n\t<span
 class=\"\">(0,015 seconds)</span>\r\n</li>\r\n";
</script>
<script>document.getElementById("test-summary").innerHTML = "<div 
id=\"progressBar\" class=\"pass\" 
style=\"width:93.181816%\">Running&nbsp;tests&nbsp;...&nbsp;(42/44)</div>\r\n";</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.9NullTrailingSpacesAndEmptyStrings"class="test_name">JdbcSlim.UserGuide.9NullTrailingSpacesAndEmptyStrings</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br><br>To insert or update <b>null</b> values define input parameters and use "?" syntax.<br>Specify null as <b>#null#</b><br><br>To insert leading and trailing Spaces use the <b>!- Denver </b><b>-!</b> syntax<br><br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>inParameters</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>Name</td>
		<td>I:1:12:0</td>
	</tr>
</tbody></table>
<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>insert into TestData
values (DEFAULT, ?, '%Phone%', '%City%', '%Profession%')</td>
		<td colspan="3">dbgetgeneratedkeys 
dbQueryParameters=inParameters 
outputFlagUnusedInputColumns=false</td>
	</tr>
	<tr>
		<td>SCOPE_IDENTITY()?</td>
		<td>City</td>
		<td>Name</td>
		<td>Phone</td>
		<td>Profession</td>
		<td>Count?</td>
	</tr>
	<tr>
		<td>$ID1=</td>
		<td>Berlin</td>
		<td>#null#</td>
		<td>12345</td>
		<td></td>
		<td>1</td>
	</tr>
	<tr>
		<td>$ID2=</td>
		<td>     Denver</td>
		<td>Bob     </td>
		<td>6789</td>
		<td></td>
		<td>1</td>
	</tr>
</tbody></table>
<br><br>To test  <b>null</b> values in output specify null as <b>#null#</b><br><br>To test leading and trailing spaces use the <b>!- text </b><b>-!</b> syntax or regex <b>=~/\A text \z/</b><br><br>To test for an empty string use regex <b>=~/\A\z/</b><br><p class="note">Define this pattern in a variable it will likely changes in the future to something more readable</p><span class="meta">variable defined: EmptyString==~/\A\z/</span>
<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td colspan="3">select City, Name, Name|| City as CityName, Profession from  TestData where ID ='%ID%'</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>City?</td>
		<td>Name?</td>
		<td>CityName?</td>
		<td>Profession?</td>
	</tr>
	<tr>
		<td>$ID1</td>
		<td>=~/\ABerlin\z/</td>
		<td>#null#</td>
		<td>#null#</td>
		<td></td>
	</tr>
	<tr>
		<td>$ID2</td>
		<td>=~/\A     Denver\z/</td>
		<td>Bob     </td>
		<td>Bob          Denver</td>
		<td>=~/\A\z/</td>
	</tr>
</tbody></table>
<br><br>if you must insert the string #null# in the database you can define a different null pattern with the property <b>inputNullString</b><br><br><table>
	<tbody><tr>
		<td>Define Properties</td>
		<td>inParameters</td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td>Name</td>
		<td>I:1:12:0</td>
	</tr>
	<tr>
		<td>City</td>
		<td>I:2:12:0</td>
	</tr>
</tbody></table>
<br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>update TestData set Name = ?, City = ? where ID ='%ID%'</td>
		<td>inputNullString=--null-- 
dbQueryParameters=inParameters 
outputFlagUnusedInputColumns=false</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>City</td>
		<td>Name</td>
		<td>Count?</td>
	</tr>
	<tr>
		<td>$ID1</td>
		<td>--null--</td>
		<td>#null#</td>
		<td>1</td>
	</tr>
</tbody></table>
<br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td colspan="3">select City, Name, length(City) as CityLength, length(Name) as NameLength  from  TestData where ID ='%ID%'</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>City?</td>
		<td>Name?</td>
		<td>CityLength?</td>
		<td>NameLength?</td>
	</tr>
	<tr>
		<td>$ID1</td>
		<td>#null#</td>
		<td>#null#</td>
		<td>#null#</td>
		<td>6</td>
	</tr>
</tbody></table>
<br>You can also change the output format for null values with the property <b>outputNullString</b><br><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>select City, Name, length(City) as CityLength, length(Name) as NameLength  from  TestData where ID ='%ID%'</td>
		<td colspan="2">outputNullString=++null++</td>
	</tr>
	<tr>
		<td>ID</td>
		<td>City?</td>
		<td>Name?</td>
		<td>CityLength?</td>
		<td>NameLength?</td>
	</tr>
	<tr>
		<td>$ID1</td>
		<td>++null++</td>
		<td>#null#</td>
		<td>++null++</td>
		<td>6</td>
	</tr>
</tbody></table>
<br><br><br><div class="collapsible invisible"><ul><li><a href="#" class="expandall">Expand</a></li><li><a href="#" class="collapseall">Collapse</a></li></ul>
	<p class="title">Cleanup</p>
	<div><br><table>
	<tbody><tr>
		<td>SQLCommand</td>
		<td>TestDatabase</td>
		<td>delete TestData  where ID ='%ID%'</td>
	</tr>
	<tr>
		<td>ID</td>
		<td colspan="2">Count?</td>
	</tr>
	<tr>
		<td>$ID1</td>
		<td colspan="2">1</td>
	</tr>
	<tr>
		<td>$ID2</td>
		<td colspan="2">1</td>
	</tr>
</tbody></table>
<br><br></div>
</div>
<br><div class="contents">
	<b>Contents:</b>
	<ul class="toc1">
</ul></div>
<br><br></div>
<script>var existingContent = 
document.getElementById("test-system-Example").innerHTML;
document.getElementById("test-system-Example").innerHTML = 
existingContent + "<li>\r\n\t<span class=\"results pass\">1 right, 0 
wrong, 0 ignored, 0 exceptions</span>\r\n\t<a 
href=\"#JdbcSlim.UserGuide.9NullTrailingSpacesAndEmptyStrings4\" 
class=\"link\">JdbcSlim.UserGuide.9NullTrailingSpacesAndEmptyStrings</a>\r\n\t<span
 class=\"\">(0,016 seconds)</span>\r\n</li>\r\n";
</script>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.UserGuide.JdbcAuthenticator"class="test_name">JdbcSlim.UserGuide.JdbcAuthenticator</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br>FitNesse pages can be secured to control access to the Wiki. See <a href="http://fitnesse.org/FitNesse.UserGuide.AdministeringFitNesse.SecurityDescription">Authentication</a><br><br>As Jdbc Slim is used for database testing and most databases have user management <br>capacities it is straight forward to use the database to authenticate FitNesse users.  <br><br>To do this follow these steps:<br><br>1. Add the jdbc slim jar and the jdbc driver jar to the class path of FitNesse.<br>2. In the <a href="http://fitnesse.org/FitNesse.UserGuide.AdministeringFitNesse.ConfigurationFile">plugins.properties</a> files add the following line<br><p class="note">Authenticator =six42.fitnesse.jdbcslim.JdbcAuthenticator</p>3. Add a file JdbcAuthenticator.properties in the same folder as the plugins.properties<br>4. The file must contain two lines which define the database driver and the database connection string<br><b>No username or password must be specified!</b><br>See example below <br><p class="note">JDBCDRIVER=org.h2.Driver</p><p class="note">DBURL=jdbc:h2:mem:h2db;DB_CLOSE_DELAY=-1</p><br><h3>Important: You should only use this Authenticator when you use SSL connections!</h3>
Otherwise your database password is transfered in plain text via the network.<br></div>
<div class="test_output_name">
	<h3>
		<a id="JdbcSlim.XIReferenceSheet"class="test_name">JdbcSlim.XIReferenceSheet</a>
	</h3>
	<a href="#test-summaries" class="top_of_page">Top</a>
</div>
<div class="alternating_block"><br><h1>Fixtures defined by JDBC Slim</h1>
<br><h3>1. <a href="#JdbcSlim.UserGuide.5ParametersOfTheSQLCommand">SQL Command</a></h3>
<br><h3>2. Define Properties</h3>
<br>This fixture is used to define 4 different kinds of properties<br><h4><a href="#general">General Properties</a> used by SQL Command</h4>
<table>
	<tbody><tr>
		<td>Define Properties</td>
		<td><i>Name for Reference</i></td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td><i>first key</i></td>
		<td><i>value</i></td>
	</tr>
</tbody></table>
<h4><a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.UsingProperties">JDBC Database Connection Properties</a></h4>
<table>
	<tbody><tr>
		<td>Define Properties</td>
		<td><i>Name for Reference</i></td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td><i>first key</i></td>
		<td><i>value</i></td>
	</tr>
</tbody></table>
<h4><a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures.WithInputParamters">Default Values</a></h4>
<table>
	<tbody><tr>
		<td>Define Properties</td>
		<td><i>Name for Reference</i></td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td><i>column name</i></td>
		<td><i>default value</i></td>
	</tr>
</tbody></table>
<h4><a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.DefaultInputValues">Input &amp; Output Parameters</a></h4>
<table>
	<tbody><tr>
		<td>Define Properties</td>
		<td><i>Name for Reference</i></td>
	</tr>
	<tr>
		<td>key</td>
		<td>value</td>
	</tr>
	<tr>
		<td><i>column name</i></td>
		<td><i>In/Out:Position:Type:Scale</i></td>
	</tr>
</tbody></table>
<br><h3>3. <a href="#JdbcSlim.UserGuide.JdbcAuthenticator">JDBC Authenticator</a></h3>
<br><a name="general"> </a><br><h1>List of all flags supported by SQL Command</h1>
<table>
	<tbody><tr>
		<td><b>Key</b></td>
		<td><b>Default
Value</b></td>
		<td><b>Example values 
separated with / </b></td>
		<td><b>Usage</b></td>
	</tr>
	<tr>
		<td colspan="4"><h4>Connection Parameters</h4></td>
	</tr>
	<tr>
		<td>jdbcDriver</td>
		<td></td>
		<td>org.h2.Driver</td>
		<td>Class name of the jdbc driver</td>
	</tr>
	<tr>
		<td>dbUrl</td>
		<td></td>
		<td>jdbc:h2:mem:h2db</td>
		<td>database connection string</td>
	</tr>
	<tr>
		<td>dbProperties</td>
		<td></td>
		<td></td>
		<td>Reference to another properties list which contains properties for
 the database connection. Check the documentation of your jdbc driver 
for the list of all possible properties. Normally the mandatory 
properties are username and password <a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.UsingProperties">See</a></td>
	</tr>
	<tr>
		<td>dbUser</td>
		<td></td>
		<td></td>
		<td>Name of the database user which will be used to open the database connection</td>
	</tr>
	<tr>
		<td>dbPassword</td>
		<td></td>
		<td></td>
		<td>Password of the database user which will be used to open the database connection</td>
	</tr>
	<tr>
		<td>dbAutoCommit</td>
		<td>true</td>
		<td>true / false</td>
		<td>if false an explicit commit is required to make the changes visible in the database to other programs.</td>
	</tr>
	<tr>
		<td>dbConnection</td>
		<td></td>
		<td></td>
		<td>Name of a Connection to be able to reuse it <a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.ConnectionReuseViaNaming">See</a> Or to use a connection object created externally <a href="#JdbcSlim.UserGuide.3HowtoConfigureTheDatabaseConnection.CustomisingTheConnectionWithOwnImplementations">See</a></td>
	</tr>
	<tr>
		<td colspan="4"><h4>Command Parameters</h4></td>
	</tr>
	<tr>
		<td>CMD</td>
		<td></td>
		<td>select * from table</td>
		<td>the SQL command to be executed. This parameter is mandatory.</td>
	</tr>
	<tr>
		<td>QUERY</td>
		<td>false</td>
		<td>true / false</td>
		<td>If the SQL command is a query statement without place holders and 
which returns multiple rows than set this flag. In the header row the 
question mark in each column can then be omitted as all columns are 
output columns. <a href="#JdbcSlim.UserGuide.6OutputOptions.Sorting">See</a></td>
	</tr>
	<tr>
		<td>dbQueryParameters</td>
		<td></td>
		<td>ParameterDefinitions</td>
		<td>Reference to another properties list which contains the definitions for input and output parameters of an SQL statement. <a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures.WithInputParamters">See</a></td>
	</tr>
	<tr>
		<td>inputDefaults</td>
		<td></td>
		<td>DefaultValues</td>
		<td>Reference to another properties list which contains default values for placeholders in an SQL command. <a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.DefaultInputValues">See</a></td>
	</tr>
	<tr>
		<td>RETRY</td>
		<td>false</td>
		<td>50:10000</td>
		<td>if given re-executes the command until all assertions pass or the 
maximum execution time has passed. The first parameter is the number of 
retries the second parameter the maximum execution time in milliseconds.
 <a href="#JdbcSlim.UserGuide.2KeyBenefits.1WaitingForAsynchronousResults">See</a></td>
	</tr>
	<tr>
		<td colspan="4"><h4>Input / Output Options</h4></td>
	</tr>
	<tr>
		<td>SORT</td>
		<td>false</td>
		<td>true / false</td>
		<td>sort the output result based on indicators in the header line. <a href="#JdbcSlim.UserGuide.6OutputOptions.Sorting">See</a></td>
	</tr>
	<tr>
		<td>SUBQUERY</td>
		<td>false</td>
		<td>true / false</td>
		<td>Ignore additional rows in the result set <a href="#JdbcSlim.UserGuide.6OutputOptions.SubQuery">See</a></td>
	</tr>
	<tr>
		<td>dbUpdateCount</td>
		<td>Count</td>
		<td>false / Count</td>
		<td>If not 'false' return the no of updates / inserts /deletes done by
 the SQL command. A column with the header named as the value of this 
flag is added to the results. <a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.InsertUpdateDelete">See</a></td>
	</tr>
	<tr>
		<td>dbGetgeneratedKeys</td>
		<td>true</td>
		<td></td>
		<td>add ID generated by the database to the result</td>
	</tr>
	<tr>
		<td>outputFlagUnusedInputColumns</td>
		<td>true</td>
		<td>true / false</td>
		<td>If true and the table has input columns which are not used by any 
place holder than these columns will be marked as fail and the test will
 fail. Either remove these columns or set this flag to false. <a href="#JdbcSlim.UserGuide.4TheMappingBetweenTestDataAndCommands.StoredProcedures.WithInputParamters">See</a></td>
	</tr>
	<tr>
		<td>outputFlagExtraOutputColumns</td>
		<td>true</td>
		<td>true / false</td>
		<td>If true and the result set has columns which are not in the table 
than these columns will be marked as fail and the test will fail. Change
 the SQL Command to not return extra columns or set this flag to false.</td>
	</tr>
	<tr>
		<td>outputNullString</td>
		<td>#null#</td>
		<td></td>
		<td>String used to display null values. <a href="#JdbcSlim.UserGuide.9NullTrailingSpacesAndEmptyStrings">See</a></td>
	</tr>
	<tr>
		<td>inputNullString</td>
		<td>#null#</td>
		<td></td>
		<td>String used to insert the value null into the database. If undefined the value from outputNullString will be used. <a href="#JdbcSlim.UserGuide.9NullTrailingSpacesAndEmptyStrings">See</a></td>
	</tr>
	<tr>
		<td colspan="4"><h4>Performance Metrics</h4></td>
	</tr>
	<tr>
		<td>dbOnlyRowCount</td>
		<td>false</td>
		<td>RowCount/ Rows</td>
		<td>Instead of returning the data of the result-set returns only the 
row count of the same.  A column with the header named as the value of 
this flag is added to the results. <a href="#JdbcSlim.UserGuide.6OutputOptions.TotalOnly">See</a></td>
	</tr>
	<tr>
		<td>dbPerf</td>
		<td>false</td>
		<td>ProcessingTime</td>
		<td>Sum of dbPerfRetrieval and dbPerfExecution. A column with the header named as the value of this flag is added to the results. <a href="#JdbcSlim.UserGuide.6OutputOptions.TotalOnly">See</a></td>
	</tr>
	<tr>
		<td>dbPerfRetrieval</td>
		<td>false</td>
		<td>RetrievalTime</td>
		<td>Time in seconds to retrieve the result data from the DB server 
into the Slim Server. A column with the header named as the value of 
this flag is added to the results. <a href="#JdbcSlim.UserGuide.6OutputOptions.TotalOnly">See</a></td>
	</tr>
	<tr>
		<td>dbPerfExecution</td>
		<td>false</td>
		<td>ExecutionTime</td>
		<td>Time in seconds to execute the SQL command. A column with the header named as the value of this flag is added to the results. <a href="#JdbcSlim.UserGuide.6OutputOptions.TotalOnly">See</a></td>
	</tr>
	<tr>
		<td colspan="4"><h4>Specials</h4></td>
	</tr>
	<tr>
		<td>DEBUG</td>
		<td>false</td>
		<td>false / true</td>
		<td>If true prints debug information. Should only be used by Jdbc Slim developers</td>
	</tr>
	<tr>
		<td>dbUseColumnName</td>
		<td>true</td>
		<td></td>
		<td>If false then don't use user defined SQL column names.  <a href="#JdbcSlim.UserGuide.6OutputOptions.ColumnAlias">See</a></td>
	</tr>
	<tr>
		<td>outputMultipleRecordsets
AsExtraColumns</td>
		<td>true</td>
		<td>true / false</td>
		<td>If the SQL command returns multiple result sets than these are 
joined into a single row. Set this parameter to false to get the data in
 separate rows. This is experimental as multiple recordsets returned 
from one command are unusual.</td>
	</tr>
	<tr>
		<td>jdbcMaxloops</td>
		<td>100</td>
		<td></td>
		<td>An Integer value which defines the maximum numbers of record sets 
and update counts which can be returned by a single SQL command. This is
 a safety parameter to avoid endless loops in case a JDBCdriver is badly
 written. Don't use.</td>
	</tr>
</tbody></table>
</div>

</article>
  
</body></html>