#Copyright (C) 2015 by six42, All rights reserved. Contact the author via http://github.com/six42
#
To encrypt a password run:

!note java -cp "commons-codec-1.9.jar;dbfit-core-3.2.0.jar" dbfit.util.crypto.CryptoApp **SECRET** -keyStoreLocation ${TestDbPath}

Replace **SECRET** with your password
If no keyfile exists it will create a new one named .dbfit.jks
The keyfile must always be named: .dbfit.jks


Define the location of your key file with ".keyStoreLocation" 
it is possible to use multiple key files in different locations.



!|Define Properties|SecretDefinition             |
|key               |value                        |
|user              |James                        |
|p2                |ENC(Qju8bnKzRCGmlE4jPh3PcA==)|
|.keyStoreLocation |${TestDbPath}                |
|password          |ENC(dP8utYfMtmrWZCylvGsOGw==)|
|cmd               |Save the world!              |

Check that all the content is now available
and the password is not shown in clear text

!| Table: SheetCommandBase|SecretDefinition||SORT|
|Key?<1                   |Value?                |
|cmd                      |Save the world!       |
|p2                       |****                  |
|password                 |****                  |
|sort                     |                      |
|user                     |James                 |


!|Script|Define Properties|                |
|show   |show             |SecretDefinition|


Use the "getSecretProperty" function to access encrypted data in your fixture

!4 CREDIT: The Encryption implementation is taken from the [[dbfit][http://github.com/dbfit/dbfit]] library.